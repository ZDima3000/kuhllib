#!/usr/local/bin/expect
# -*-C++-*- lib-allocator-members.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  allocator members
# Version: $Id: lib-allocator-members.exp,v 1.3 2003/04/13 19:39:28 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include <iostream>
  #include <cstdlib>
  #include <memory>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  using STD size_t;
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  using STD size_t;
  #else
  #  define STD ::std::
  using namespace std;
  #endif

  struct foo
  {
    foo() { STD cout << "foo::foo()\n"; }
    foo(foo const&) { STD cout << "foo::foo(foo const&)\n"; }
    ~foo() { STD cout << "foo::~foo()\n"; }
  };

  bool flag = false;
  void* operator new(size_t size) throw(STD bad_alloc)
    {
      if (flag)
	STD cout << "new called\n";
      return STD malloc(size);
    }
  void operator delete(void* ptr) throw()
    {
      if (flag)
	STD cout << "delete called\n";
      STD free(ptr);
    }

  int main()
  {
    bool failed = false;
    foo f;
    STD allocator<foo> alloc;

    if (alloc.address(f) != &f && (failed = true))
      STD cout << "STD allocator::address(reference) failed\n";
    if (alloc.address(const_cast<foo const&>(f)) != &f && (failed = true))
      STD cout << "STD allocator::address(const_reference) failed\n";

    flag = true;
    foo* fp = alloc.allocate(1);
    alloc.deallocate(fp, 1);
    fp = alloc.allocate(1, static_cast< STD allocator<void>::const_pointer>(0));
    flag = false;

    alloc.construct(fp, f);
    alloc.destroy(fp);

    alloc.deallocate(fp, 1);

    return 0;
  }
}

simple_test "allocator members" "" {
foo::foo()
new called
delete called
new called
foo::foo(foo const&)
foo::~foo()
foo::~foo()
}
