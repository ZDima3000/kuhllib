#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/lib-date-time.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Date and time
# Version: $Id: lib-date-time.exp,v 1.1.1.1 2002/06/05 01:03:01 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ctime>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  #if !defined(NULL)
  #  error "NULL not defined"
  #endif

  template <class T> void test_type() {};
  template <class T> void check_type(T const&) {};

  int main(int ac, char *av[])
  {
    test_type< STD size_t>();
    test_type< STD clock_t>();
    test_type< STD time_t>();
    test_type<struct STD tm>();
    check_type<char*>(STD asctime(static_cast<struct STD tm const*>(0)));
    check_type< STD clock_t>(STD clock());
    check_type<char*>(STD ctime(static_cast< STD time_t const*>(0)));
    check_type<double>(STD difftime(STD time_t(), STD time_t()));
    check_type<struct STD tm*>(STD gmtime(static_cast< STD time_t const*>(0)));
    check_type<struct STD tm*>(STD localtime(static_cast< STD time_t const*>(0)));
    check_type< STD time_t>(STD mktime(static_cast<struct STD tm*>(0)));
    check_type< STD size_t>(STD strftime(static_cast<char*>(0), STD size_t(0),
					"%d", static_cast<struct STD tm const*>(0)));
    check_type< STD time_t>(STD time(static_cast< STD time_t*>(0)));
    return 0;
  }
}
