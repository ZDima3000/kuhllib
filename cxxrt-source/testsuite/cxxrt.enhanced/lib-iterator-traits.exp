#!/usr/local/bin/expect
# -*-C++-*- lib-iterator-traits.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Iterator traits
# Version: $Id: lib-iterator-traits.exp,v 1.1.1.1 2002/06/05 01:03:39 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include <iterator>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  using STD ptrdiff_t;
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  using STD ptrdiff_t;
  #else
  #  define STD ::std::
  using namespace std;
  #endif

  struct foo {};

  struct input_iterator
  {
    typedef char difference_type;
    typedef foo value_type;
    typedef STD input_iterator_tag iterator_category;
    typedef foo* pointer;
    typedef foo& reference;

    bool operator== (input_iterator const&) const { return true; }
    bool operator!= (input_iterator const&) const { return false; }

    foo operator* () const { return foo(); }
    foo* operator->() const { static foo rc; return &rc; }
    
    input_iterator& operator++ () { return *this; }
    input_iterator& operator++ (int) { return *this; }
  };


  int main(int ac, char *av[])
  {
    compare_types< STD iterator_traits<input_iterator>::difference_type, char>();
    compare_types< STD iterator_traits<input_iterator>::value_type, foo>();
    compare_types< STD iterator_traits<input_iterator>::iterator_category, STD input_iterator_tag>();
    compare_types< STD iterator_traits<input_iterator>::pointer, foo*>();
    compare_types< STD iterator_traits<input_iterator>::reference, foo&>();

    compare_types< STD iterator_traits<foo*>::difference_type, ptrdiff_t>();
    compare_types< STD iterator_traits<foo*>::value_type, foo>();
    compare_types< STD iterator_traits<foo*>::iterator_category, STD random_access_iterator_tag>();
    compare_types< STD iterator_traits<foo*>::pointer, foo*>();
    compare_types< STD iterator_traits<foo*>::reference, foo&>();

    compare_types< STD iterator_traits<foo const*>::difference_type, ptrdiff_t>();
    compare_types< STD iterator_traits<foo const*>::value_type, foo>();
    compare_types< STD iterator_traits<foo const*>::iterator_category, STD random_access_iterator_tag>();
    compare_types< STD iterator_traits<foo const*>::pointer, foo const*>();
    compare_types< STD iterator_traits<foo const*>::reference, foo const&>();

    return 0;
  }
}
