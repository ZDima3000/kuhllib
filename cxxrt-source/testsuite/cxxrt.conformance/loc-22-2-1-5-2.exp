#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1-5-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  codecvt virtual functions
# Version: $Id: loc-22-2-1-5-2.exp,v 1.1.1.1 2002/06/05 01:03:22 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  using namespace std;
  #else
  #  define STD _CXXRT_STD
  using STD mbstate_t;
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK": "test failed") << "\n";
  }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    switch (av[1][0])
      {
      case '0':
        {
          typedef STD codecvt<char, char, STD mbstate_t> codecvt;
          codecvt const &cc = STD use_facet<codecvt>(STD locale::classic());

          STD mbstate_t state;
          char const    *from = "1234";
          char const    *fnext;
          char          to[sizeof(from)];
          char          *tnext;

          result(cc.out(state, from, from + 4, fnext, to, to + 4, tnext) == STD codecvt_base::noconv);
          result(from == fnext && to == tnext);
          result(cc.in(state, from, from + 4, fnext, to, to + 4, tnext) == STD codecvt_base::noconv);
          result(from == fnext && to == tnext);
          result(cc.unshift(state, to, to + 4, tnext) == STD codecvt_base::noconv);
          result(from == fnext && to == tnext);
          result(cc.encoding() == 1);
          result(cc.always_noconv());
          result(cc.length(state, from, from + 4, 5) == 4);
          result(cc.length(state, from, from + 4, 3) == 3);
          result(cc.max_length() == 1);
        }
        break;
      case '1':
        {
          STD codecvt_base::result ok = STD codecvt_base::ok;
          STD codecvt_base::result partial = STD codecvt_base::partial;

          typedef STD codecvt<wchar_t, char, STD mbstate_t> codecvt;
          codecvt const &cc = STD use_facet<codecvt>(STD locale::classic());

          STD mbstate_t state = STD mbstate_t();
          wchar_t const ostr[3] = { L'A', L'1', L'.' };
          STD size_t const  size = 3;
          wchar_t const *onext;

          char estr1[sizeof(wchar_t) * (size + 1)];
          char estr[sizeof(wchar_t) * (size + 1)];
          char *enext;
          char const *cenext;

          wchar_t fstr[size];
          wchar_t *fnext;

          //---

          result(cc.out(state, ostr, ostr + 3, onext, estr1, estr1 + sizeof(estr1), enext) == ok);
          result(onext == ostr + 3);
          result(enext == estr1 + 3 * sizeof(wchar_t));
	  STD cout << (void*)enext << " - " << (void*)estr1 << " - " << (void*)(estr1 + 3 * sizeof(wchar_t)) << "\n";

          result(cc.out(state, ostr, ostr+3, onext, estr, estr+2 * sizeof(wchar_t) - 1, enext) == partial);
          result(onext == ostr + 2);
          result(enext == estr + 2 * sizeof(wchar_t) - 1);

          result(cc.out(state, onext, ostr+2, onext, enext, enext + 1, enext) == ok);
          result(onext == ostr + 2);
          result(enext == estr + 2 * sizeof(wchar_t));

          result(cc.out(state, onext, ostr+3, onext, enext, enext + sizeof(wchar_t) - 2, enext) == partial);
          result(onext == ostr + 3);
          result(enext == estr + 3 * sizeof(wchar_t) - 2);

          STD cout << "\n";
          //---

          result(cc.unshift(state, enext, enext + 1, enext) == partial);
          result(enext == estr + 3 * sizeof(wchar_t) - 1);

          result(cc.unshift(state, enext, enext + 1, enext) == ok);
          result(enext == estr + 3 * sizeof(wchar_t));

          STD cout << "\n";
          //---

          char const *c1 = estr1;
          char const *c = estr;
          while (c1 != estr1 + 3 * sizeof(wchar_t) && *c1 == *c)
            {
              ++c1;
              ++c;
            }
          result(c1 == estr1 + 3 * sizeof(wchar_t));

          STD cout << "\n";
          //---

          STD size_t const wsize = sizeof(wchar_t);

          result(cc.in(state, estr, estr + 2*wsize - 1, cenext, fstr, fstr + 1, fnext) == partial);
          result(fnext == fstr + 1);

          result(cc.in(state, cenext, estr + 2*wsize, cenext, fnext, fstr + 3, fnext) == ok);
          result(cenext == estr + 2 * wsize);
          result(fnext == fstr + 2);

          result(cc.in(state, cenext, cenext + wsize, cenext, fnext, fstr + wsize, fnext) == ok);
          result(cenext == estr + 3 * wsize);
          result(fnext == fstr + 3);
          result(fstr[0] == ostr[0] && fstr[1] == ostr[1] && fstr[2] == ostr[2]);

          result(cc.in(state, estr, estr + 3 * wsize, cenext, fstr, fstr + 3, fnext) == ok);
          result(fstr[0] == ostr[0] && fstr[1] == ostr[1] && fstr[2] == ostr[2]);
          
          STD cout << "\n";
          //---

          result(cc.encoding() == sizeof(wchar_t));
          result(cc.always_noconv() == false);
          result(cc.max_length() == 1);
        }
        break;
      }

    return 0;
  }
}

simple_test "codecvt<char, char, mbstate_t> virtuals" "0" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}

simple_test "codecvt<wchar_t, char, mbstate_t> virtuals" "1" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK

test OK
test OK
test OK
test OK

test OK

test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK

test OK
test OK
test OK
}
