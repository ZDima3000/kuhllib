#!/usr/local/bin/expect
# -*-C++-*- loc-22-1-1-1-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Type locale::category
# Version: $Id: loc-22-1-1-1-1-2.exp,v 1.1.1.1 2002/06/05 01:03:22 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <cstdio>
  #include <testio.hpp>

  void result(bool rc)
  {
    char const msg_OK[] =   "test OK\n";
    char const msg_fail[] = "test failed\n";
    if (rc)
      write(msg_OK);
    else
      write(msg_fail);
  }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        char const oops[] = "wrong number of arguments\n";
        write(oops);
        return 1;
      }

    STD locale loc;

    switch (av[1][0])
      {
      case '0':
        result((STD locale::collate | STD locale::ctype | STD locale::monetary
               | STD locale::numeric | STD locale::time | STD locale::messages) == STD locale::all);
        result(((STD locale::collate | STD locale::ctype | STD locale::monetary)
              & (STD locale::ctype | STD locale::monetary | STD locale::messages))
              == (STD locale::ctype | STD locale::monetary));
        break;
      case '1':
        result(STD has_facet< STD collate<char> >(loc));
        result(STD has_facet< STD collate<wchar_t> >(loc));
        result(STD has_facet< STD ctype<char> >(loc));
        result(STD has_facet< STD ctype<wchar_t> >(loc));
        result(STD has_facet< STD codecvt<char, char, mbstate_t> >(loc));
        result(STD has_facet< STD codecvt<wchar_t, char, mbstate_t> >(loc));
        result(STD has_facet< STD moneypunct<char, false> >(loc));
        result(STD has_facet< STD moneypunct<char, true> >(loc));
        result(STD has_facet< STD moneypunct<wchar_t, false> >(loc));
        result(STD has_facet< STD moneypunct<wchar_t, true> >(loc));
        result(STD has_facet< STD money_get<char> >(loc));
        result(STD has_facet< STD money_get<wchar_t> >(loc));
        result(STD has_facet< STD money_put<char> >(loc));
        result(STD has_facet< STD money_put<wchar_t> >(loc));
        result(STD has_facet< STD numpunct<char> >(loc));
        result(STD has_facet< STD numpunct<wchar_t> >(loc));
        result(STD has_facet< STD num_get<char> >(loc));
        result(STD has_facet< STD num_get<wchar_t> >(loc));
        result(STD has_facet< STD num_put<char> >(loc));
        result(STD has_facet< STD num_put<wchar_t> >(loc));
        result(STD has_facet< STD time_get<char> >(loc));
        result(STD has_facet< STD time_get<wchar_t> >(loc));
        result(STD has_facet< STD time_put<char> >(loc));
        result(STD has_facet< STD time_put<wchar_t> >(loc));
        result(STD has_facet< STD messages<char> >(loc));
        result(STD has_facet< STD messages<wchar_t> >(loc));
      }

    return 0;
  }
}

simple_test "bitmask category" "0" {
test OK
test OK
}

simple_test "standard facets" "1" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}
