#!/usr/local/bin/expect
# -*-C++-*- lib-reverse-iter-opindex.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  operator[]
# Version: $Id: lib-reverse-iter-opindex.exp,v 1.1.1.1 2002/06/05 01:03:45 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include "testiterator.hpp"
  #include <iterator>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  struct foo {};

  template <class It>
    void test()
    {
      typename It::value_type array[5];

      It it(tst::end(array));
      STD reverse_iterator<It> rit(it);
      STD cout << (&rit[3] == (array + 1)? "OK\n": "reverse_iterator::operator[]() failed\n");
    }

  int main()
  {
    test<tst::random_access_iterator<foo> >();
    return 0;
  }
}

simple_test "reverse_iterator::operator[]()" "" {
OK
}
