#!/usr/local/bin/expect
# -*-C++-*- io-27-7-1-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Member functions
# Version: $Id: io-27-7-1-2.exp,v 1.1.1.1 2002/06/05 01:02:51 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <sstream>
  #include <iostream>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  template <class cT>
    struct strings
    {
      static cT const* str1;
      static cT const* str2;
    };

  template <> char const* strings<char>::str1 = "Hello, world\n";
  template <> char const* strings<char>::str2 = "Goodbye, world\n";
  template <> wchar_t const* strings<wchar_t>::str1 = L"Hello, world\n";
  template <> wchar_t const* strings<wchar_t>::str2 = L"Goodbye, world\n";

  template <class cT>
    inline char const* test()
    {
      STD basic_stringbuf<cT> sb(strings<cT>::str1);
      if (!(sb.str() == strings<cT>::str1))
	return "ctor or str() function not operating correctly\n";

      sb.str(strings<cT>::str2);
      if (!(sb.str() == strings<cT>::str2))
	return "str(basic_string&) function not operating correctly\n";
      
      return "OK\n";
    }

  int main()
  {
    STD cout << test<char>();
    STD cout << test<wchar_t>();
    return 0;
  }
}

simple_test "basic_stringbuf<> members" "" {
OK
OK
}
