#!/usr/local/bin/expect
# -*-C++-*- loc-22-1-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Class locale
# Version: $Id: loc-22-1-1.exp,v 1.2 2006/04/07 07:07:13 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <string>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  template <class T> inline void check_type(T const&) {}

  class facet: public STD locale::facet
  {
  public:
    static STD locale::id id;
  };
  STD locale::id facet::id;

  int main(int, char *[])
  {
    check_type< STD locale::facet*>(static_cast< STD locale::facet*>(0));
    check_type< STD locale::id*>(static_cast< STD locale::id*>(0));

    check_type< STD locale::category>(STD locale::none);
    check_type< STD locale::category>(STD locale::collate);
    check_type< STD locale::category>(STD locale::ctype);
    check_type< STD locale::category>(STD locale::monetary);
    check_type< STD locale::category>(STD locale::numeric);
    check_type< STD locale::category>(STD locale::time);
    check_type< STD locale::category>(STD locale::messages);
    check_type< STD locale::category>(STD locale::all);

    STD locale l1;
    STD locale l2(l1);
    STD locale l3("C");
    STD locale l4(l1, "C", STD locale::collate);
    STD locale l5(l1, new facet);
    STD locale l6(l1, l2, STD locale::collate);

    l1 = l2;
    l1 = l2.combine<facet>(l3);

    STD basic_string<char> name = l1.name();
    
    l1 == l2;
    l1 != l2;
    l1(STD basic_string<char>("s1"), STD basic_string<char>("s2"));

    l1 = STD locale::global(l1);
    l1 = STD locale::classic();

    return 0;
  }
}
