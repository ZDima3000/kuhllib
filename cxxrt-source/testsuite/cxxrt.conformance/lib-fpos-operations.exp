#!/usr/local/bin/expect
# -*-C++-*- io-27-4-3-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  fpos requirements
# Version: $Id: lib-fpos-operations.exp,v 1.1.1.1 2002/06/05 01:02:54 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #include <iostream>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  using namespace std;
  #else
  #  define STD _CXXRT_STD
  using STD mbstate_t;
  #endif

  template <class stateT>
  char const* f()
  {
    STD fpos<stateT> fp1(17);
    if (fp1 != STD fpos<stateT>(17))
      return "error: construction of fpos<stateT> failed\n";

    STD fpos<stateT> fp2 = 17;
    if (fp2 != STD fpos<stateT>(17))
      return "error: construction of fpos<stateT> failed\n";

    STD streamoff off1(fp1);
    if (fp1 != STD fpos<stateT>(off1))
      return "error: conversion with streamoff failed\n";

    if (!(fp1 == fp2))
      return "error: compare failed\n";
    if (fp1 != fp2)
      return "error: compare failed\n";
      
    STD streamoff off2(STD streamsize(4));

    fp1 = fp2 + off2;
    if (fp1 - off2 != fp2)
      return "error: arithmetic failed\n";

    fp2 += off2;
    if (fp1 != fp2)
      return "error: arithmetic failed\n";

    fp1 = fp2 - off2;
    if (fp1 + off2 != fp2)
      return "error: arithmetic failed\n";

    fp2 -= off2;
    if (fp1 != fp2)
      return "error: arithmetic failed\n";

    fp1 -= off2;
    off2 = fp1 - fp2;
    if (fp2 + off2 != fp1)
      return "error: arithmetic failed\n";

    STD streamsize sz(15);
    if (STD streamsize(STD streamoff(sz)) != sz)
      return "error: conversion with streamsize failed\n";

    return "OK\n";
  }

  int main(int, char *[])
  {
    STD cout << f<mbstate_t>();

    return 0;
  }
}

simple_test "fpos requirements" "" {
OK
}
