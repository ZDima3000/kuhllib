#!/usr/local/bin/expect
# -*-C++-*- io-27-4-4.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  fpos requirements 

# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  using namespace std;
  #else
  #  define STD _CXXRT_STD
  using _CXXRT_STD mbstate_t;
  #endif

  template <class stateT>
  inline void f()
  {
    stateT s = stateT();

    STD fpos<stateT> p;
    STD fpos<stateT> q;
    p.state(s);
    q.state(s);
    STD streamoff    o = STD streamoff();
    STD streamsize   sz = STD streamsize();
    int              i = 17;

    STD fpos<stateT> fp1(i);
    STD fpos<stateT> fp2 = i;
    STD fpos<stateT> fp3(o);

    STD streamoff o1(p);

    p == q;
    p != q;

    q = p + o;
    p += o;

    q = p - o;
    q -= o;

    o = p - q;

    STD streamsize sz1(o);
    STD streamoff  o2(sz);
    STD streamoff  o3(sz1);
    
    // avoid warnings about unused variables:
    q -= o1;
    q -= o2;
    q -= o3;
    fp1.state();
    fp2.state();
    fp3.state();
  }

  int main()
  {
    f<mbstate_t>();
    return 0;
  }
}
