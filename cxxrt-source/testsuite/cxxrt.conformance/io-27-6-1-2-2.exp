#!/usr/local/bin/expect
# -*-C++-*- io-27-6-1-2-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Arithmetic Extractors
# Version: $Id: io-27-6-1-2-2.exp,v 1.1.1.1 2002/06/05 01:03:14 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #include <istream>
  #include <streambuf>
  #include <iterator>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK": "test failed") << "\n";
  }

  template <class cT, class It>
    class my_num_get: public STD num_get<cT, It>
    {
    protected:
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, bool&) const
        {
          STD cout << "do_get(..., bool)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, long&) const
        {
          STD cout << "do_get(..., long)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, unsigned short&) const
        {
          STD cout << "do_get(..., unsigned short)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, unsigned int&) const
        {
          STD cout << "do_get(..., unsigned int)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, unsigned long&) const
        {
          STD cout << "do_get(..., unsigned long)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, float&) const
        {
          STD cout << "do_get(..., float)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, double&) const
        {
          STD cout << "do_get(..., double)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, long double&) const
        {
          STD cout << "do_get(..., long double)\n";
          return b;
        }
      It do_get(It b, It, STD ios_base&, STD ios_base::iostate&, void*&) const
        {
          STD cout << "do_get(..., void*)\n";
          return b;
        }
    };

  template <class cT>
    class testbuf: public STD basic_streambuf<cT>
    {
    public:
      testbuf(): count(0) {}

    private:
      typename STD basic_streambuf<cT>::int_type underflow()
        {
          return count % 2? cT('1'): cT(' ');
        }
      typename STD basic_streambuf<cT>::int_type uflow()
        {
          return count++ % 2? cT('1'): cT(' ');
        }
      typename STD basic_streambuf<cT>::int_type pbackfail(typename STD basic_streambuf<cT>::int_type c)
	{
          return --count % 2? cT('1'): cT(' ');
	}
      int count;
    };

  template <class T, class cT>
    inline void test_type(STD basic_istream<cT, STD char_traits<cT> >& in)
    {
      T val;
      in >> val;
    }

  template <class cT>
    inline void test()
    {
      STD basic_istream<cT> in(new testbuf<cT>());
      STD locale l(STD locale::classic(), new my_num_get<cT, STD istreambuf_iterator<cT> >);
      in.imbue(l);

      test_type<bool>(in);
      test_type<short>(in);
      test_type<int>(in);
      test_type<long>(in);
      test_type<unsigned short>(in);
      test_type<unsigned int>(in);
      test_type<unsigned long>(in);
      test_type<float>(in);
      test_type<double>(in);
      test_type<long double>(in);
      test_type<void*>(in);
    }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    switch (av[1][0])
      {
      case '0':
        test<char>();
        break;
      case '1':
        test<wchar_t>();
        break;
      }

    return 0;
  }
}

simple_test "basic_istream<char> numeric extractors" "0" {
do_get(..., bool)
do_get(..., long)
do_get(..., long)
do_get(..., long)
do_get(..., unsigned short)
do_get(..., unsigned int)
do_get(..., unsigned long)
do_get(..., float)
do_get(..., double)
do_get(..., long double)
do_get(..., void*)
}

simple_test "basic_istream<wchar_t> numeric extractors" "1" {
do_get(..., bool)
do_get(..., long)
do_get(..., long)
do_get(..., long)
do_get(..., unsigned short)
do_get(..., unsigned int)
do_get(..., unsigned long)
do_get(..., float)
do_get(..., double)
do_get(..., long double)
do_get(..., void*)
}
