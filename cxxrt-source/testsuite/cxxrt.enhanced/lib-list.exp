#!/usr/local/bin/expect
# -*-C++-*- lib-list.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Template class list 
# Version: $Id: lib-list.exp,v 1.1.1.1 2002/06/05 01:03:40 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include <list>
  #include <memory>
  #include <iterator>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  struct foo
  {
  };

  int main(int ac, char *av[])
  {
    compare_types< STD allocator<foo>::reference, STD list<foo>::reference>();
    compare_types< STD allocator<foo>::const_reference, STD list<foo>::const_reference>();
    test_type< STD list<foo>::iterator>();
    test_type< STD list<foo>::const_iterator>();
    test_type< STD list<foo>::size_type>();
    test_type< STD list<foo>::difference_type>();
    compare_types<foo, STD list<foo>::value_type>();
    compare_types< STD allocator<foo>, STD list<foo>::allocator_type>();
    compare_types< STD allocator<foo>::pointer, STD list<foo>::pointer>();
    compare_types< STD allocator<foo>::const_pointer, STD list<foo>::const_pointer>();
    compare_types< STD reverse_iterator< STD list<foo>::iterator>, STD list<foo>::reverse_iterator>();
    compare_types< STD reverse_iterator< STD list<foo>::const_iterator>, STD list<foo>::const_reverse_iterator>();
  }
}
