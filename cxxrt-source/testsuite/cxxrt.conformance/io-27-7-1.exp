#!/usr/local/bin/expect
# -*-C++-*- io-27-7-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  template class basic_stringbuf
# Version: $Id: io-27-7-1.exp,v 1.1.1.1 2002/06/05 01:03:09 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <sstream>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  template <class T> void eq_type_fn(T*, T*) {}
  template <class T1, class T2> void eq_type() { T1* t1 = 0; T2* t2 = 0; eq_type_fn(t1, t2); }

  template <class T> void test_type(T const&) {}

  template <class cT>
    void test()
    {
      test_type< STD basic_streambuf<cT>*>(static_cast< STD basic_stringbuf<cT>*>(0));
      eq_type< STD basic_stringbuf<cT>, STD basic_stringbuf<cT, STD char_traits<cT> > >();
      eq_type< STD basic_stringbuf<cT>, STD basic_stringbuf<cT, STD char_traits<cT>, STD allocator<cT> > >();

      eq_type<cT, typename STD basic_stringbuf<cT>::char_type>();
      eq_type<typename STD char_traits<cT>::int_type, typename STD basic_stringbuf<cT>::int_type>();
      eq_type<typename STD char_traits<cT>::pos_type, typename STD basic_stringbuf<cT>::pos_type>();
      eq_type<typename STD char_traits<cT>::off_type, typename STD basic_stringbuf<cT>::off_type>();
      eq_type< STD char_traits<cT>, typename STD basic_stringbuf<cT>::traits_type>();

      
      STD basic_string<cT> s;
      STD basic_stringbuf<cT> sb1;
      sb1.str(s);
      STD basic_stringbuf<cT> sb2(STD ios_base::in);
      sb2.str(s);
      STD basic_stringbuf<cT> sb3(s);
      s = sb3.str();
      STD basic_stringbuf<cT> sb4(s, STD ios_base::in);
      s = sb4.str();
    }

  int main()
  {
    test<char>();
    test<wchar_t>();
  }
}
