#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-3-1-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  numpunct members
# Version: $Id: loc-22-2-3-1-1.exp,v 1.1.1.1 2002/06/05 01:02:50 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
	#include <string>
	#if !defined(_CXXRT_STD)
	#  define STD std::
	#else
	#  define STD _CXXRT_STD
	#endif

	template <class T>
	class test: public STD numpunct<T>
	{
		typedef typename STD numpunct<T>::char_type char_type;
		typedef typename STD numpunct<T>::string_type string_type;

		char_type   do_decimal_point() const { STD cout << "do_decimal_point()\n"; return char_type(); }
		char_type   do_thousands_sep() const { STD cout << "do_thousands_sep()\n"; return char_type(); }
		STD string  do_grouping() const { STD cout << "do_grouping()\n"; return STD string(); }
		string_type do_truename() const { STD cout << "do_truename()\n"; return string_type(); }
		string_type do_falsename() const { STD cout << "do_falsename()\n"; return string_type(); }
	};

  int main(int ac, char *av[])
  {
		if (ac != 2)
			{
				STD cerr << "wrong number of arguments\n";
				return 1;
			}

		switch (av[1][0])
			{
			case '0':
				{
					test<char> np;

					np.decimal_point();
					np.thousands_sep();
					np.grouping();
					np.truename();
					np.falsename();
				}
				break;
			case '1':
				{
					test<wchar_t> np;

					np.decimal_point();
					np.thousands_sep();
					np.grouping();
					np.truename();
					np.falsename();
				}
				break;
			}

    return 0;
  }
}

simple_test "numpunct<char> members" "0" {
do_decimal_point()
do_thousands_sep()
do_grouping()
do_truename()
do_falsename()
} 

simple_test "numpunct<wchar_t> members" "0" {
do_decimal_point()
do_thousands_sep()
do_grouping()
do_truename()
do_falsename()
} 
