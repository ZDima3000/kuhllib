#!/usr/local/bin/expect
# -*-C++-*- io-27-7.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Header <sstream> synopsis
# Version: $Id: io-27-7.exp,v 1.1.1.1 2002/06/05 01:02:49 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <sstream>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  template <class T> void test_type(T const&) {}

  template <class cT>
    void test()
    {
      typedef STD allocator<cT> alloc;

      STD basic_stringbuf<cT>* sb = 0;
      sb = static_cast< STD basic_stringbuf<cT, STD char_traits<cT> >*>(0);
      sb = static_cast< STD basic_stringbuf<cT, STD char_traits<cT>, alloc>*>(0);

      STD basic_istringstream<cT>* is = 0;
      is = static_cast< STD basic_istringstream<cT, STD char_traits<cT> >*>(0);
      is = static_cast< STD basic_istringstream<cT, STD char_traits<cT>, alloc>*>(0);

      STD basic_ostringstream<cT>* os = 0;
      os = static_cast< STD basic_ostringstream<cT, STD char_traits<cT> >*>(0);
      os = static_cast< STD basic_ostringstream<cT, STD char_traits<cT>, alloc>*>(0);

      STD basic_stringstream<cT>* s = 0;
      s = static_cast< STD basic_stringstream<cT, STD char_traits<cT> >*>(0);
      s = static_cast< STD basic_stringstream<cT, STD char_traits<cT>, alloc>*>(0);
    }

  int main()
  {
    test_type< STD stringbuf*>(static_cast< STD basic_stringbuf<char>*>(0));
    test_type< STD istringstream*>(static_cast< STD basic_istringstream<char>*>(0));
    test_type< STD ostringstream*>(static_cast< STD basic_ostringstream<char>*>(0));
    test_type< STD stringstream*>(static_cast< STD basic_stringstream<char>*>(0));
    test<char>();

    test_type< STD wstringbuf*>(static_cast< STD basic_stringbuf<wchar_t>*>(0));
    test_type< STD wistringstream*>(static_cast< STD basic_istringstream<wchar_t>*>(0));
    test_type< STD wostringstream*>(static_cast< STD basic_ostringstream<wchar_t>*>(0));
    test_type< STD wstringstream*>(static_cast< STD basic_stringstream<wchar_t>*>(0));
    test<wchar_t>();
    return 0;
  }
}
