#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  The ctype category
# Version: $Id: loc-22-2-1.exp,v 1.1.1.1 2002/06/05 01:02:45 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  template <class T> void check_type(T const&) {}

  int main(int, char *[])
  {
    STD ctype_base ctb;

    check_type< STD ctype_base::mask>(ctb.space);
    check_type< STD ctype_base::mask>(ctb.print);
    check_type< STD ctype_base::mask>(ctb.cntrl);
    check_type< STD ctype_base::mask>(ctb.upper);
    check_type< STD ctype_base::mask>(ctb.lower);
    check_type< STD ctype_base::mask>(ctb.alpha);
    check_type< STD ctype_base::mask>(ctb.digit);
    check_type< STD ctype_base::mask>(ctb.punct);
    check_type< STD ctype_base::mask>(ctb.xdigit);
    check_type< STD ctype_base::mask>(ctb.alnum);
    check_type< STD ctype_base::mask>(ctb.graph);

    STD ctype_base::mask m01 = ctb.space;
    STD ctype_base::mask m02 = ctb.print;
    STD ctype_base::mask m03 = ctb.cntrl;
    check_type< STD ctype_base::mask>(m01 | m02);
    check_type< STD ctype_base::mask>(m01 & m03);
    check_type< STD ctype_base::mask>(m01 ^ m03);
    check_type< STD ctype_base::mask>(~m01);

    return 0;
  }
}
