#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/lib-c-strings.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Null-terminated sequence utilities
# Version: $Id: lib-c-strings.exp,v 1.2 2002/06/06 01:56:55 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <cctype>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #    define STDNAME std
  #  else
  #    define STD _CXXRT_STD
  #    define STDNAME _CXXRT_STD_NAME
  #  endif
  #endif

  template <class T> void check_type(T const&) {};

  int main()
  {
    check_type<int(*)(int)>(&STD isalnum);
    check_type<int(*)(int)>(&STD isalpha);
    check_type<int(*)(int)>(&STD iscntrl);
    check_type<int(*)(int)>(&STD isdigit);
    check_type<int(*)(int)>(&STD isgraph);
    check_type<int(*)(int)>(&STD islower);
    check_type<int(*)(int)>(&STD isprint);
    check_type<int(*)(int)>(&STD ispunct);
    check_type<int(*)(int)>(&STD isspace);
    check_type<int(*)(int)>(&STD isupper);
    check_type<int(*)(int)>(&STD isxdigit);
    check_type<int(*)(int)>(&STD tolower);
    check_type<int(*)(int)>(&STD toupper);

    {
      using namespace STDNAME;

      check_type<int(*)(int)>(&isalnum);
      check_type<int(*)(int)>(&isalpha);
      check_type<int(*)(int)>(&iscntrl);
      check_type<int(*)(int)>(&isdigit);
      check_type<int(*)(int)>(&isgraph);
      check_type<int(*)(int)>(&islower);
      check_type<int(*)(int)>(&isprint);
      check_type<int(*)(int)>(&ispunct);
      check_type<int(*)(int)>(&isspace);
      check_type<int(*)(int)>(&isupper);
      check_type<int(*)(int)>(&isxdigit);
      check_type<int(*)(int)>(&tolower);
      check_type<int(*)(int)>(&toupper);
    }

    return 0;
  }
}

inline_compile {
  #include <cstring>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #    define STDNAME std
  #  else
  #    define STD _CXXRT_STD
  #    define STDNAME _CXXRT_STD_NAME
  #  endif
  #endif

  #if !defined(NULL)
  #  error "NULL is not defined"
  #endif

  template <class T> void test_type() {};
  template <class T> void check_type(T const&) {};

  int main()
  {
    test_type< STD size_t>();

    check_type<void const*(*)(void const*, int, STD size_t)>(&STD memchr);
    check_type<void*(*)(void*, int, STD size_t)>(&STD memchr);
    check_type<int(*)(void const*, void const*, STD size_t)>(&STD memcmp);
    check_type<void*(*)(void*, void const*, STD size_t)>(&STD memcpy);
    check_type<void*(*)(void*, void const*, STD size_t)>(&STD memmove);
    check_type<void*(*)(void*, int, STD size_t)>(&STD memset);

    check_type<char*(*)(char*, char const*)>(&STD strcat);
    check_type<char const*(*)(char const*, int)>(&STD strchr);
    check_type<char*(*)(char*, int)>(&STD strchr);
    check_type<int(*)(char const*, char const*)>(&STD strcmp);
    check_type<int(*)(char const*, char const*)>(&STD strcoll);
    check_type<char*(*)(char*, char const*)>(&STD strcpy);
    check_type< STD size_t(*)(char const*, char const*)>(&STD strcspn);
    check_type<char*(*)(int)>(&STD strerror);
    check_type< STD size_t(*)(char const*)>(&STD strlen);
    check_type<char*(*)(char*, char const*, STD size_t)>(&STD strncat);
    check_type<int(*)(char const*, char const*, STD size_t)>(&STD strncmp);
    check_type<char*(*)(char*, char const*, STD size_t)>(&STD strncpy);
    check_type<char const*(*)(char const*, char const*)>(&STD strpbrk);
    check_type<char*(*)(char*, char const*)>(&STD strpbrk);
    check_type<char const*(*)(char const*, int)>(&STD strrchr);
    check_type<char*(*)(char*, int)>(&STD strrchr);
    check_type< STD size_t(*)(char const*, char const*)>(&STD strspn);
    check_type<char const*(*)(char const*, char const*)>(&STD strstr);
    check_type<char*(*)(char*, char const*)>(&STD strstr);
    check_type<char*(*)(char*, char const*)>(&STD strtok);
    check_type< STD size_t(*)(char*, char const*, STD size_t)>(&STD strxfrm);

    {
      using namespace STDNAME;

      test_type<size_t>();

      check_type<void const*(*)(void const*, int, size_t)>(&memchr);
      check_type<void*(*)(void*, int, size_t)>(&memchr);
      check_type<int(*)(void const*, void const*, size_t)>(&memcmp);
      check_type<void*(*)(void*, void const*, size_t)>(&memcpy);
      check_type<void*(*)(void*, void const*, size_t)>(&memmove);
      check_type<void*(*)(void*, int, size_t)>(&memset);

      check_type<char*(*)(char*, char const*)>(&strcat);
      check_type<char const*(*)(char const*, int)>(&strchr);
      check_type<char*(*)(char*, int)>(&strchr);
      check_type<int(*)(char const*, char const*)>(&strcmp);
      check_type<int(*)(char const*, char const*)>(&strcoll);
      check_type<char*(*)(char*, char const*)>(&strcpy);
      check_type<size_t(*)(char const*, char const*)>(&strcspn);
      check_type<char*(*)(int)>(&strerror);
      check_type<size_t(*)(char const*)>(&strlen);
      check_type<char*(*)(char*, char const*, size_t)>(&strncat);
      check_type<int(*)(char const*, char const*, size_t)>(&strncmp);
      check_type<char*(*)(char*, char const*, size_t)>(&strncpy);
      check_type<char const*(*)(char const*, char const*)>(&strpbrk);
      check_type<char*(*)(char*, char const*)>(&strpbrk);
      check_type<char const*(*)(char const*, int)>(&strrchr);
      check_type<char*(*)(char*, int)>(&strrchr);
      check_type<size_t(*)(char const*, char const*)>(&strspn);
      check_type<char const*(*)(char const*, char const*)>(&strstr);
      check_type<char*(*)(char*, char const*)>(&strstr);
      check_type<char*(*)(char*, char const*)>(&strtok);
      check_type<size_t(*)(char*, char const*, size_t)>(&strxfrm);
    }

    return 0;
  }
}

inline_compile {
  #include <cstdlib>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #    define STDNAME std
  #  else
  #    define STD _CXXRT_STD
  #    define STDNAME _CXXRT_STD_NAME
  #  endif
  #endif

  #if !defined(MB_CUR_MAX)
  #  error "MB_CUR_MAX is not defined"
  #endif

  template <class T> void check_type(T const&) {};

  int main()
  {
    check_type<double (*)(char const*)>(&STD atof);
    check_type<int (*)(char const*)>(&STD atoi);
    check_type<long (*)(char const*)>(&STD atol);
    check_type<int (*)(char const*, STD size_t)>(&STD mblen);
    check_type< STD size_t (*)(wchar_t*, char const*, STD size_t)>(&STD mbstowcs);
    check_type<int (*)(wchar_t*, char const*, STD size_t)>(&STD mbtowc);
    check_type<double (*)(char const*, char**)>(&STD strtod);
    check_type<long (*)(char const*, char**, int)>(&STD strtol);
    check_type<unsigned long (*)(char const*, char**, int)>(&STD strtoul);
    check_type< STD size_t (*)(char*, wchar_t const*, STD size_t)>(&STD wcstombs);
    check_type<int (*)(char*, wchar_t)>(&STD wctomb);

    {
      using namespace STDNAME;

      check_type<double (*)(char const*)>(&atof);
      check_type<int (*)(char const*)>(&atoi);
      check_type<long (*)(char const*)>(&atol);
      check_type<int (*)(char const*, size_t)>(&mblen);
      check_type<size_t (*)(wchar_t*, char const*, size_t)>(&mbstowcs);
      check_type<int (*)(wchar_t*, char const*, size_t)>(&mbtowc);
      check_type<double (*)(char const*, char**)>(&strtod);
      check_type<long (*)(char const*, char**, int)>(&strtol);
      check_type<unsigned long (*)(char const*, char**, int)>(&strtoul);
      check_type<size_t (*)(char*, wchar_t const*, size_t)>(&wcstombs);
      check_type<int (*)(char*, wchar_t)>(&wctomb);
    }

    return 0;
  }
}

inline_compile {
  #include <cwchar>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #    define STDNAME std
  #  else
  #    define STD _CXXRT_STD
  #    define STDNAME _CXXRT_STD_NAME
  #  endif
  #endif

  #if !defined(NULL)
  #  error "NULL is not defined"
  #endif
  #if !defined(WCHAR_MAX)
  #  error "WCHAR_MAX is not defined"
  #endif
  #if !defined(WCHAR_MIN)
  #  error "WCHAR_MIN is not defined"
  #endif
  #if !defined(WEOF)
  #  error "WEOF is not defined"
  #endif

  template <class T> void test_type() {};
  template <class T> void check_type(T const&) {};

  int main()
  {
    test_type< STD mbstate_t>();
    test_type< STD size_t>();
    test_type< STD wint_t>();
    
    check_type< STD wint_t(*)(int)>(&STD btowc);
    // check_type< STD wint_t(*)(STD FILE*)>(&STD fgetwc);
    // check_type<wchar_t*(*)(wchar_t*, int, STD FILE*)>(&STD fgetws);
    // check_type< STD wint_t(*)(wchar_t, STD FILE*)>(&STD fputwc);
    // check_type<int(*)(wchar_t const*, STD FILE*)>(&STD fputws);
    // check_type<int(*)(STD FILE*, int)>(&STD fwide);
    // check_type<int(*)(STD FILE*, wchar_t const*, ...)>(&STD fwprintf);
    // check_type<int(*)(STD FILE*, wchar_t const*, ...)>(&STD fwscanf);
    // check_type< STD wint_t(*)(STD FILE*)>(&STD getwc);
    // check_type< STD wint_t(*)(void)>(&STD getwchar);
    check_type< STD size_t(*)(const char*, STD size_t, STD mbstate_t*)>(&STD mbrlen);
    check_type< STD size_t(*)(wchar_t*, const char*, STD size_t, STD mbstate_t*)>(&STD mbrtowc);
    check_type<int(*)(const STD mbstate_t*)>(&STD mbsinit);
    check_type< STD size_t(*)(wchar_t*, const char**, STD size_t, STD mbstate_t*)>(&STD mbsrtowcs);
    // check_type< STD wint_t(*)(wchar_t, STD FILE*)>(&STD putwc);
    // check_type< STD wint_t(*)(wchar_t)>(&STD putwchar);
    // check_type<int(*)(wchar_t*, STD size_t, wchar_t const*, ...)>(&STD swprintf);
    // check_type<int(*)(wchar_t const*, wchar_t const*, ...)>(&STD swscanf);
    // check_type< STD wint_t(*)(STD wint_t, STD FILE*)>(&STD ungetwc);
    // check_type<int(*)(STD FILE*, wchar_t const*, STD va_list)>(&STD vfwprintf);
    // check_type<int(*)(wchar_t*, STD size_t, wchar_t const*, STD va_list)>(&STD vswprintf);
    // check_type<int(*)(wchar_t const*, STD va_list)>(&STD vwprintf);
    check_type< STD size_t(*)(char*, wchar_t, STD mbstate_t*)>(&STD wcrtomb);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&STD wcscat);
    check_type<wchar_t*(*)(wchar_t*, wchar_t)>(&STD wcschr);
    check_type<wchar_t const*(*)(wchar_t const*, wchar_t)>(&STD wcschr);
    check_type<int(*)(wchar_t const*, wchar_t const*)>(&STD wcscmp);
    check_type<int(*)(wchar_t const*, wchar_t const*)>(&STD wcscoll);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&STD wcscpy);
    check_type< STD size_t(*)(wchar_t const*, wchar_t const*)>(&STD wcscspn);
    // check_type< STD size_t(*)(wchar_t*, STD size_t, wchar_t const*, const struct tm*)>(&STD wcsftime);
    check_type< STD size_t(*)(wchar_t const*)>(&STD wcslen);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*, STD size_t)>(&STD wcsncat);
    check_type<int(*)(wchar_t const*, wchar_t const*, STD size_t)>(&STD wcsncmp);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*, STD size_t)>(&STD wcsncpy);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&STD wcspbrk);
    check_type<wchar_t const*(*)(wchar_t const*, wchar_t const*)>(&STD wcspbrk);
    check_type<wchar_t*(*)(wchar_t*, wchar_t)>(&STD wcsrchr);
    check_type<wchar_t const*(*)(wchar_t const*, wchar_t)>(&STD wcsrchr);
    check_type< STD size_t(*)(char*, wchar_t const**, STD size_t, STD mbstate_t*)>(&STD wcsrtombs);
    check_type< STD size_t(*)(wchar_t const*, wchar_t const*)>(&STD wcsspn);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&STD wcsstr);
    check_type<wchar_t const*(*)(wchar_t const*, wchar_t const*)>(&STD wcsstr);
    check_type<double(*)(wchar_t const*, wchar_t**)>(&STD wcstod);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*, wchar_t**)>(&STD wcstok);
    check_type<long(*)(wchar_t const*, wchar_t**, int)>(&STD wcstol);
    check_type<unsigned long(*)(wchar_t const*, wchar_t**, int)>(&STD wcstoul);
    check_type< STD size_t(*)(wchar_t*, wchar_t const*, STD size_t)>(&STD wcsxfrm);
    check_type<int(*)(STD wint_t)>(&STD wctob);
    check_type<wchar_t*(*)(wchar_t*, wchar_t, STD size_t)>(&STD wmemchr);
    check_type<wchar_t const*(*)(wchar_t const*, wchar_t, STD size_t)>(&STD wmemchr);
    check_type<int(*)(wchar_t const*, wchar_t const*, STD size_t)>(&STD wmemcmp);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*, STD size_t)>(&STD wmemcpy);
    check_type<wchar_t*(*)(wchar_t*, wchar_t const*, STD size_t)>(&STD wmemmove);
    check_type<wchar_t*(*)(wchar_t*, wchar_t, STD size_t)>(&STD wmemset);
    // check_type<int(*)(wchar_t const*, ...)>(&STD wprintf);
    // check_type<int(*)(wchar_t const*, ...)>(&STD wscanf); 

    {
      using namespace STDNAME;

      test_type<mbstate_t>();
      test_type<size_t>();
      test_type<wint_t>();
      
      check_type<wint_t(*)(int)>(&btowc);
      // check_type<wint_t(*)(FILE*)>(&fgetwc);
      // check_type<wchar_t*(*)(wchar_t*, int, FILE*)>(&fgetws);
      // check_type<wint_t(*)(wchar_t, FILE*)>(&fputwc);
      // check_type<int(*)(wchar_t const*, FILE*)>(&fputws);
      // check_type<int(*)(FILE*, int)>(&fwide);
      // check_type<int(*)(FILE*, wchar_t const*, ...)>(&fwprintf);
      // check_type<int(*)(FILE*, wchar_t const*, ...)>(&fwscanf);
      // check_type<wint_t(*)(FILE*)>(&getwc);
      // check_type<wint_t(*)(void)>(&getwchar);
      check_type<size_t(*)(const char*, size_t, mbstate_t*)>(&mbrlen);
      check_type<size_t(*)(wchar_t*, const char*, size_t, mbstate_t*)>(&mbrtowc);
      check_type<int(*)(const mbstate_t*)>(&mbsinit);
      check_type<size_t(*)(wchar_t*, const char**, size_t, mbstate_t*)>(&mbsrtowcs);
      // check_type<wint_t(*)(wchar_t, FILE*)>(&putwc);
      // check_type<wint_t(*)(wchar_t)>(&putwchar);
      // check_type<int(*)(wchar_t*, size_t, wchar_t const*, ...)>(&swprintf);
      // check_type<int(*)(wchar_t const*, wchar_t const*, ...)>(&swscanf);
      // check_type<wint_t(*)(wint_t, FILE*)>(&ungetwc);
      // check_type<int(*)(FILE*, wchar_t const*, va_list)>(&vfwprintf);
      // check_type<int(*)(wchar_t*, size_t, wchar_t const*, va_list)>(&vswprintf);
      // check_type<int(*)(wchar_t const*, va_list)>(&vwprintf);
      check_type<size_t(*)(char*, wchar_t, mbstate_t*)>(&wcrtomb);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&wcscat);
      check_type<wchar_t*(*)(wchar_t*, wchar_t)>(&wcschr);
      check_type<wchar_t const*(*)(wchar_t const*, wchar_t)>(&wcschr);
      check_type<int(*)(wchar_t const*, wchar_t const*)>(&wcscmp);
      check_type<int(*)(wchar_t const*, wchar_t const*)>(&wcscoll);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&wcscpy);
      check_type<size_t(*)(wchar_t const*, wchar_t const*)>(&wcscspn);
      // check_type<size_t(*)(wchar_t*, size_t, wchar_t const*, const struct tm*)>(&wcsftime);
      check_type<size_t(*)(wchar_t const*)>(&wcslen);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*, size_t)>(&wcsncat);
      check_type<int(*)(wchar_t const*, wchar_t const*, size_t)>(&wcsncmp);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*, size_t)>(&wcsncpy);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&wcspbrk);
      check_type<wchar_t const*(*)(wchar_t const*, wchar_t const*)>(&wcspbrk);
      check_type<wchar_t*(*)(wchar_t*, wchar_t)>(&wcsrchr);
      check_type<wchar_t const*(*)(wchar_t const*, wchar_t)>(&wcsrchr);
      check_type<size_t(*)(char*, wchar_t const**, size_t, mbstate_t*)>(&wcsrtombs);
      check_type<size_t(*)(wchar_t const*, wchar_t const*)>(&wcsspn);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*)>(&wcsstr);
      check_type<wchar_t const*(*)(wchar_t const*, wchar_t const*)>(&wcsstr);
      check_type<double(*)(wchar_t const*, wchar_t**)>(&wcstod);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*, wchar_t**)>(&wcstok);
      check_type<long(*)(wchar_t const*, wchar_t**, int)>(&wcstol);
      check_type<unsigned long(*)(wchar_t const*, wchar_t**, int)>(&wcstoul);
      check_type<size_t(*)(wchar_t*, wchar_t const*, size_t)>(&wcsxfrm);
      check_type<int(*)(wint_t)>(&wctob);
      check_type<wchar_t*(*)(wchar_t*, wchar_t, size_t)>(&wmemchr);
      check_type<wchar_t const*(*)(wchar_t const*, wchar_t, size_t)>(&wmemchr);
      check_type<int(*)(wchar_t const*, wchar_t const*, size_t)>(&wmemcmp);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*, size_t)>(&wmemcpy);
      check_type<wchar_t*(*)(wchar_t*, wchar_t const*, size_t)>(&wmemmove);
      check_type<wchar_t*(*)(wchar_t*, wchar_t, size_t)>(&wmemset);
      // check_type<int(*)(wchar_t const*, ...)>(&wprintf);
      // check_type<int(*)(wchar_t const*, ...)>(&wscanf); 
    }

    return 0;
  }
}

inline_compile {
  #include <cwctype>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #    define STDNAME std
  #  else
  #    define STD _CXXRT_STD
  #    define STDNAME _CXXRT_STD_NAME
  #  endif
  #endif

  #if !defined(WEOF)
  #  error "WEOF is not defined"
  #endif

  template <class T> void test_type() {};
  template <class T> void check_type(T const&) {};

  int main()
  {
    test_type< STD wint_t>();
    test_type< STD wctype_t>();
    test_type< STD wctrans_t>();

    check_type<int(*)(STD wint_t)>(&STD iswalnum);
    check_type<int(*)(STD wint_t)>(&STD iswalpha);
    check_type<int(*)(STD wint_t)>(&STD iswcntrl);
    check_type<int(*)(STD wint_t, STD wctype_t)>(&STD iswctype);
    check_type<int(*)(STD wint_t)>(&STD iswdigit);
    check_type<int(*)(STD wint_t)>(&STD iswgraph);
    check_type<int(*)(STD wint_t)>(&STD iswlower);
    check_type<int(*)(STD wint_t)>(&STD iswprint);
    check_type<int(*)(STD wint_t)>(&STD iswpunct);
    check_type<int(*)(STD wint_t)>(&STD iswspace);
    check_type<int(*)(STD wint_t)>(&STD iswupper);
    check_type<int(*)(STD wint_t)>(&STD iswxdigit);
    check_type< STD wint_t(*)(STD wint_t, STD wctrans_t)>(&STD towctrans);
    check_type< STD wint_t(*)(STD wint_t)>(&STD towlower);
    check_type< STD wint_t(*)(STD wint_t)>(&STD towupper);
    check_type< STD wctrans_t(*)(char const*)>(&STD wctrans);
    check_type< STD wctype_t(*)(char const*)>(&STD wctype);

    {
      using namespace STDNAME;

      test_type<wint_t>();
      test_type<wctype_t>();
      test_type<wctrans_t>();

      check_type<int(*)(wint_t)>(&iswalnum);
      check_type<int(*)(wint_t)>(&iswalpha);
      check_type<int(*)(wint_t)>(&iswcntrl);
      check_type<int(*)(wint_t, wctype_t)>(&iswctype);
      check_type<int(*)(wint_t)>(&iswdigit);
      check_type<int(*)(wint_t)>(&iswgraph);
      check_type<int(*)(wint_t)>(&iswlower);
      check_type<int(*)(wint_t)>(&iswprint);
      check_type<int(*)(wint_t)>(&iswpunct);
      check_type<int(*)(wint_t)>(&iswspace);
      check_type<int(*)(wint_t)>(&iswupper);
      check_type<int(*)(wint_t)>(&iswxdigit);
      check_type<wint_t(*)(wint_t, wctrans_t)>(&towctrans);
      check_type<wint_t(*)(wint_t)>(&towlower);
      check_type<wint_t(*)(wint_t)>(&towupper);
      check_type<wctrans_t(*)(char const*)>(&wctrans);
      check_type<wctype_t(*)(char const*)>(&wctype);
    }

    return 0;
  }
}
