#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/lib-function-objects.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Function objects
# Version: $Id: lib-function-objects.exp,v 1.1.1.1 2002/06/05 01:02:46 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <functional>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  struct foo
  {
    foo operator+ (foo const&) const { return *this; }
    foo operator- (foo const&) const { return *this; }
    foo operator* (foo const&) const { return *this; }
    foo operator/ (foo const&) const { return *this; }
    foo operator% (foo const&) const { return *this; }
    foo operator- () const { return *this; }

    bool operator== (foo const&) const { return true; }
    bool operator!= (foo const&) const { return true; }
    bool operator<  (foo const&) const { return true; }
    bool operator>  (foo const&) const { return true; }
    bool operator<= (foo const&) const { return true; }
    bool operator>= (foo const&) const { return true; }

    foo operator& (foo const&) const { return *this; }
    foo operator| (foo const&) const { return *this; }
    foo operator! () const { return *this; }
  };
  struct bar
  {
    bool b0() { return true; }
    bool b1(int) { return true; }
    bool c0() const { return true; }
    bool c1(int) const { return true; }
    typedef int argument_type;
  };
  struct foobar
  {
    typedef int first_argument_type;
    typedef int second_argument_type;
    typedef bool result_type;
    bool operator()(int, int) const { return true; }
  };

  bool f1(int) { return true; }
  bool f2(int, double) { return true; }

  template <class T> inline void test_type() {}
  template <class T> inline void check_type(T const&) {}

  int main()
    {
      test_type< STD unary_function<foo, bar> >();
      test_type< STD binary_function<foo, bar, foobar> >();

      test_type< STD plus<foo> >();
      test_type< STD minus<foo> >();
      test_type< STD multiplies<foo> >();
      test_type< STD divides<foo> >();
      test_type< STD modulus<foo> >();
      test_type< STD negate<foo> >();

      test_type< STD equal_to<foo> >();
      test_type< STD not_equal_to<foo> >();
      test_type< STD greater<foo> >();
      test_type< STD less<foo> >();
      test_type< STD greater_equal<foo> >();
      test_type< STD less_equal<foo> >();

      test_type< STD logical_and<foo> >();
      test_type< STD logical_or<foo> >();
      test_type< STD logical_not<foo> >();

      test_type< STD unary_negate<foo> >();
      test_type< STD binary_negate<foo> >();
      check_type< STD unary_negate<bar> >(STD not1(bar()));
      check_type< STD binary_negate<foobar> >(STD not2(foobar()));

      test_type< STD binder1st<foobar> >();
      check_type< STD binder1st<foobar> >(STD bind1st(foobar(), 4));
      test_type< STD binder2nd<foobar> >();
      check_type< STD binder2nd<foobar> >(STD bind2nd(foobar(), 4));
      
      test_type< STD pointer_to_unary_function<int, bool> >();
      check_type< STD pointer_to_unary_function<int, bool> >(STD ptr_fun(f1));
      test_type< STD pointer_to_binary_function<int, double, bool> >();
      check_type< STD pointer_to_binary_function<int, double, bool> >(STD ptr_fun(f2));

      test_type< STD mem_fun_t<bool, bar> >();
      check_type< STD mem_fun_t<bool, bar> >(STD mem_fun(&bar::b0));
      test_type< STD mem_fun1_t<bool, bar, int> >();
      check_type< STD mem_fun1_t<bool, bar, int> >(STD mem_fun(&bar::b1));
      
      test_type< STD mem_fun_ref_t<bool, bar> >();
      check_type< STD mem_fun_ref_t<bool, bar> >(STD mem_fun_ref(&bar::b0));
      test_type< STD mem_fun1_ref_t<bool, bar, int> >();
      check_type< STD mem_fun1_ref_t<bool, bar, int> >(STD mem_fun_ref(&bar::b1));
      
      test_type< STD const_mem_fun_t<bool, bar> >();
      check_type< STD const_mem_fun_t<bool, bar> >(STD mem_fun(&bar::c0));
      test_type< STD const_mem_fun1_t<bool, bar, int> >();
      check_type< STD const_mem_fun1_t<bool, bar, int> >(STD mem_fun(&bar::c1));
      
      test_type< STD const_mem_fun_ref_t<bool, bar> >();
      check_type< STD const_mem_fun_ref_t<bool, bar> >(STD mem_fun_ref(&bar::c0));
      test_type< STD const_mem_fun1_ref_t<bool, bar, int> >();
      check_type< STD const_mem_fun1_ref_t<bool, bar, int> >(STD mem_fun_ref(&bar::c1));
      
      return 0;
    }
}
