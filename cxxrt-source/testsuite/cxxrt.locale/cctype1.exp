#!/usr/local/bin/expect
# -*-C++-*- cctype1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:   
# Version: $Id: cctype1.exp,v 1.1.1.1 2002/06/05 01:03:46 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <string>
  #include <iostream>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK\n": "test failed\n");
  }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
	STD cerr << "usage: " << av[0] << " <arg>\n";
	return 0;
      }
    char c = STD string("space") == av[1]? ' ': av[1][0];

    STD locale l;

    result(STD isspace(c, l));
    result(STD isprint(c, l));
    result(STD iscntrl(c, l));
    result(STD isupper(c, l));
    result(STD islower(c, l));
    result(STD isalpha(c, l));
    result(STD isdigit(c, l));
    result(STD ispunct(c, l));
    result(STD isxdigit(c, l));
    result(STD isalnum(c, l));
    result(STD isgraph(c, l));

    return 0;
  }
}

simple_test "character classification 'a'" "a" {
test failed
test OK
test failed
test failed
test OK
test OK
test failed
test failed
test OK
test OK
test OK
}

simple_test "character classification ' '" "space" {
test OK
test OK
test failed
test failed
test failed
test failed
test failed
test failed
test failed
test failed
test failed
}
