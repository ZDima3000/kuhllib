#!/usr/local/bin/expect
# -*-C++-*- lib-complex-value-ops.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Complex value operations
# Version: $Id: lib-complex-value-ops.exp,v 1.1.1.1 2002/06/05 01:02:46 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include "testnumeric.hpp"
  #include <complex>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  template <class T>
    bool feq(STD complex<T> const& c1, STD complex<T> const& c2)
    {
      return tst::feq(c1.real(), c2.real()) && tst::feq(c1.imag(), c2.imag());
    }

  template <class T>
    void test()
    {
      bool failed = false;
      STD complex<T> c1(T(3.0), T(4.0));

      if ((c1.real() != STD real(c1)) && (failed = true))
	STD cout << "global real() failed\n";
      if ((c1.imag() != STD imag(c1)) && (failed = true))
	STD cout << "global imag() failed\n";

      if (!tst::feq(STD abs(c1), T(5.0)) && (failed = true))
	STD cout << "abs() failed\n";
      if (!tst::feq(STD arg(c1), T(0.927295)) && (failed = true))
	STD cout << "arg() failed\n";

      if (!tst::feq(STD norm(c1), T(25.0)) && (failed = true))
	STD cout << "norm() failed\n";

      if (!feq(STD conj(c1), STD complex<T>(T(3.0), T(-4.0))) && (failed = true))
	STD cout << "norm() failed\n";
      if (!feq(STD polar(T(1.4142136), T(0.78539816)), STD complex<T>(T(1.0), T(1.0))) && (failed = true))
	STD cout << "polar() failed\n";
	
      STD cout << (failed? "test failed\n": "OK\n");
    }

  int main()
  {
    test<float>();
    test<double>();
    test<long double>();

    return 0;
  }
}

simple_test "complex value operations" "" {
OK
OK
OK
}
