#!/usr/local/bin/expect
# -*-C++-*- lib-stddef-h.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Common definitions <stddef.h>
# Version: $Id: lib-stddef-h.exp,v 1.1.1.1 2002/06/05 01:03:48 dietmar_kuehl Exp $ 
# --------------------------------------------------------------------------- 

inline_compile {
  #include <cstddef>

  #if defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  if defined(_CXXRT_STD)
  #    define STD _CXXRT_STD
  #  else
  #    define STD ::std::
  #  endif
  #endif

  #if !defined(NULL)
  #  error "NULL not defined as macro"
  #endif
  #if !defined(offsetof)
  #  error "offsetof() not defined as a macro"
  #endif

  template <class S, class T>
    void equal_types() { S* s = 0; T* t = 0; t = s; s = t; }

  template <class S, class T>
    void has_type(T const&) { equal_types<S, T>(); }

  struct foo {
    int bar;
  };

  int main()
  {
    char obj[2];
    has_type<STD ptrdiff_t>((obj + 1) - obj);
    has_type<STD size_t>(sizeof(char));

    has_type<STD size_t>(offsetof(foo, bar));

    return 0;
  }
}

inline_compile {
  #include <stddef.h>

  #if defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  #if !defined(NULL)
  #  error "NULL not defined as macro"
  #endif
  #if !defined(offsetof)
  #  error "offsetof() not defined as a macro"
  #endif

  template <class S, class T>
    void equal_types() { S* s = 0; T* t = 0; t = s; s = t; }

  template <class S, class T>
    void has_type(T const&) { equal_types<S, T>(); }

  struct foo {
    int bar;
  };

  int main()
  {
    char obj[2];
    has_type<ptrdiff_t>((obj + 1) - obj);
    has_type<size_t>(sizeof(char));

    has_type<size_t>(offsetof(foo, bar));

    return 0;
  }
}
