#!/usr/local/bin/expect
# -*-C++-*- lib-complex-trancendentals.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  complex trancendentals
# Version: $Id: lib-complex-trancendentals.exp,v 1.1.1.1 2002/06/05 01:02:48 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include <iostream>
  #include <complex>
  #include <iterator>
  #include <algorithm>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  template <class T>
    void test(char const* msg, STD complex<T> (*fct)(STD complex<T> const&))
    {
      STD complex<T> vals[] = {
	STD complex<T>(T(5.0)), STD complex<T>(T(3.0), T(2.0)),
	STD complex<T>(T(0.0), T(5.0)), STD complex<T>(T(-3.0), T(2.0)),
	STD complex<T>(T(-5.0)), STD complex<T>(T(-3.0), T(-2.0)),
	STD complex<T>(T(0.0), T(-5.0)), STD complex<T>(T(3.0), T(-2.0))
      };

      STD cout << msg;
      try { STD transform(vals + 0, vals + 8, STD ostream_iterator< STD complex<T> >(STD cout, " "), fct); } catch (...) {}
      STD cout << "\n";
    }

  template <class T, class P, class Fct>
    void test(char const* msg, P p, Fct fct)
    {
      STD complex<T> vals[] = {
	STD complex<T>(T(5.0)), STD complex<T>(T(3.0), T(2.0)),
	STD complex<T>(T(0.0), T(5.0)), STD complex<T>(T(-3.0), T(2.0)),
	STD complex<T>(T(-5.0)), STD complex<T>(T(-3.0), T(-2.0)),
	STD complex<T>(T(0.0), T(-5.0)), STD complex<T>(T(3.0), T(-2.0))
      };

      STD cout << msg;
      for (int i = 0; i < 8; ++i)
	try { STD cout << fct(vals[i], p) << " "; } catch (...) {}
      STD cout << "\n";
    }

  template <class T>
  STD complex<T> pow_helper(STD complex<T> const& c, T const& t) { return STD pow(t, c); }

  template <class T>
    void test()
    {
      test("cos: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD cos));
      test("cosh: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD cosh));
      test("exp: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD exp));
      test("log: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD log));
      test("log10: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD log10));

      test<T>("pow1: ", 3, static_cast< STD complex<T> (*)(STD complex<T> const&, int)>(STD pow));
      test<T>("pow2: ", T(3.5), static_cast< STD complex<T> (*)(STD complex<T> const&, T const&)>(STD pow));
      test<T>("pow3: ", STD complex<T>(T(3.5), T(2.0)),
	      static_cast< STD complex<T> (*)(STD complex<T> const&, STD complex<T> const&)>(STD pow));
      test<T>("pow4: ", T(3.5), static_cast< STD complex<T> (*)(STD complex<T> const&, T const&)>(pow_helper));

      test("sin: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD sin));
      test("sinh: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD sinh));
      test("sqrt: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD sqrt));
      test("tan: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD tan));
      test("tanh: ", static_cast< STD complex<T> (*)(STD complex<T> const&)>(STD tanh));
    }

  int main()
  {
    STD cout.precision(4);
    STD cout << STD fixed;

    STD cout << "float:\n"; test<float>();
    STD cout << "double:\n"; test<double>();
    STD cout << "long double:\n"; test<long double>();
    return 0;
  }
}

simple_test "complex trancendentals" "" {
float:
cos: (0.2837,0.0000) (-3.7245,-0.5118) (74.2100,-0.0000) (-3.7245,0.5118) (0.2837,-0.0000) (-3.7245,-0.5118) (74.2100,0.0000) (-3.7245,0.5118) 
cosh: (74.2100,0.0000) (-4.1896,9.1092) (0.2837,-0.0000) (-4.1896,-9.1092) (74.2100,-0.0000) (-4.1896,9.1092) (0.2837,0.0000) (-4.1896,-9.1092) 
exp: (148.4132,0.0000) (-8.3585,18.2637) (0.2837,-0.9589) (-0.0207,0.0453) (0.0067,0.0000) (-0.0207,-0.0453) (0.2837,0.9589) (-8.3585,-18.2637) 
log: (1.6094,0.0000) (1.2825,0.5880) (1.6094,1.5708) (1.2825,2.5536) (1.6094,3.1416) (1.2825,-2.5536) (1.6094,-1.5708) (1.2825,-0.5880) 
log10: (0.6990,0.0000) (0.5570,0.2554) (0.6990,0.6822) (0.5570,1.1090) (0.6990,1.3644) (0.5570,-1.1090) (0.6990,-0.6822) (0.5570,-0.2554) 
pow1: (125.0000,0.0000)(-9.0000,46.0000)(-0.0000,-125.0000)(9.0000,46.0000)(-125.0000,0.0000)(9.0000,-46.0000)(-0.0000,125.0000)(-9.0000,-46.0000)
pow2: (279.5085,0.0000)(-41.6677,78.6460)(197.6424,-197.6423)(-78.6460,41.6677)(-nan,0.0000)(-78.6460,-41.6677)(197.6424,197.6423)(-41.6677,-78.6460)
pow3: (-278.6742,-21.5798)(-2.4523,-27.3482)(-9.1748,7.8560)(0.2616,-0.4710)(-nan,-nan)(14644.7490,-1313.1901)(-4206.8223,-4913.0405)(252.2094,140.0641)
pow4: (525.2188,0.0000)(-34.4903,25.4693)(0.9998,-0.0194)(-0.0188,0.0139)(0.0019,0.0000)(-0.0188,-0.0139)(0.9998,0.0194)(-34.4903,-25.4693)
sin: (-0.9589,0.0000) (0.5309,-3.5906) (0.0000,74.2032) (-0.5309,-3.5906) (0.9589,0.0000) (-0.5309,3.5906) (0.0000,-74.2032) (0.5309,3.5906) 
sinh: (74.2032,0.0000) (-4.1689,9.1545) (0.0000,-0.9589) (4.1689,9.1545) (-74.2032,0.0000) (4.1689,-9.1545) (0.0000,0.9589) (-4.1689,-9.1545) 
sqrt: (2.2361,0.0000) (1.8174,0.5503) (1.5811,1.5811) (0.5503,1.8174) (0.0000,2.2361) (0.5503,-1.8174) (1.5811,-1.5811) (1.8174,-0.5503) 
tan: (-3.3805,0.0000) (-0.0099,0.9654) (0.0000,0.9999) (0.0099,0.9654) (3.3805,0.0000) (0.0099,-0.9654) (0.0000,-0.9999) (-0.0099,-0.9654) 
tanh: (0.9999,0.0000) (1.0032,-0.0038) (0.0000,-3.3805) (-1.0032,-0.0038) (-0.9999,0.0000) (-1.0032,0.0038) (0.0000,3.3805) (1.0032,0.0038) 
double:
cos: (0.2837,0.0000) (-3.7245,-0.5118) (74.2099,-0.0000) (-3.7245,0.5118) (0.2837,-0.0000) (-3.7245,-0.5118) (74.2099,0.0000) (-3.7245,0.5118) 
cosh: (74.2099,0.0000) (-4.1896,9.1092) (0.2837,-0.0000) (-4.1896,-9.1092) (74.2099,-0.0000) (-4.1896,9.1092) (0.2837,0.0000) (-4.1896,-9.1092) 
exp: (148.4132,0.0000) (-8.3585,18.2637) (0.2837,-0.9589) (-0.0207,0.0453) (0.0067,0.0000) (-0.0207,-0.0453) (0.2837,0.9589) (-8.3585,-18.2637) 
log: (1.6094,0.0000) (1.2825,0.5880) (1.6094,1.5708) (1.2825,2.5536) (1.6094,3.1416) (1.2825,-2.5536) (1.6094,-1.5708) (1.2825,-0.5880) 
log10: (0.6990,0.0000) (0.5570,0.2554) (0.6990,0.6822) (0.5570,1.1090) (0.6990,1.3644) (0.5570,-1.1090) (0.6990,-0.6822) (0.5570,-0.2554) 
pow1: (125.0000,0.0000)(-9.0000,46.0000)(-0.0000,-125.0000)(9.0000,46.0000)(-125.0000,0.0000)(9.0000,-46.0000)(-0.0000,125.0000)(-9.0000,-46.0000)
pow2: (279.5085,0.0000)(-41.6677,78.6460)(197.6424,-197.6424)(-78.6460,41.6677)(-nan,0.0000)(-78.6460,-41.6677)(197.6424,197.6424)(-41.6677,-78.6460)
pow3: (-278.6742,-21.5798)(-2.4523,-27.3482)(-9.1748,7.8560)(0.2616,-0.4710)(-nan,-nan)(14644.7505,-1313.1903)(-4206.8204,-4913.0386)(252.2094,140.0641)
pow4: (525.2188,0.0000)(-34.4903,25.4693)(0.9998,-0.0194)(-0.0188,0.0139)(0.0019,0.0000)(-0.0188,-0.0139)(0.9998,0.0194)(-34.4903,-25.4693)
sin: (-0.9589,0.0000) (0.5309,-3.5906) (0.0000,74.2032) (-0.5309,-3.5906) (0.9589,0.0000) (-0.5309,3.5906) (0.0000,-74.2032) (0.5309,3.5906) 
sinh: (74.2032,0.0000) (-4.1689,9.1545) (0.0000,-0.9589) (4.1689,9.1545) (-74.2032,0.0000) (4.1689,-9.1545) (0.0000,0.9589) (-4.1689,-9.1545) 
sqrt: (2.2361,0.0000) (1.8174,0.5503) (1.5811,1.5811) (0.5503,1.8174) (0.0000,2.2361) (0.5503,-1.8174) (1.5811,-1.5811) (1.8174,-0.5503) 
tan: (-3.3805,0.0000) (-0.0099,0.9654) (0.0000,0.9999) (0.0099,0.9654) (3.3805,0.0000) (0.0099,-0.9654) (0.0000,-0.9999) (-0.0099,-0.9654) 
tanh: (0.9999,0.0000) (1.0032,-0.0038) (0.0000,-3.3805) (-1.0032,-0.0038) (-0.9999,0.0000) (-1.0032,0.0038) (0.0000,3.3805) (1.0032,0.0038) 
long double:
cos: (0.2837,0.0000) (-3.7245,-0.5118) (74.2099,-0.0000) (-3.7245,0.5118) (0.2837,-0.0000) (-3.7245,-0.5118) (74.2099,0.0000) (-3.7245,0.5118) 
cosh: (74.2099,0.0000) (-4.1896,9.1092) (0.2837,-0.0000) (-4.1896,-9.1092) (74.2099,-0.0000) (-4.1896,9.1092) (0.2837,0.0000) (-4.1896,-9.1092) 
exp: (148.4132,0.0000) (-8.3585,18.2637) (0.2837,-0.9589) (-0.0207,0.0453) (0.0067,0.0000) (-0.0207,-0.0453) (0.2837,0.9589) (-8.3585,-18.2637) 
log: (1.6094,0.0000) (1.2825,0.5880) (1.6094,1.5708) (1.2825,2.5536) (1.6094,3.1416) (1.2825,-2.5536) (1.6094,-1.5708) (1.2825,-0.5880) 
log10: (0.6990,0.0000) (0.5570,0.2554) (0.6990,0.6822) (0.5570,1.1090) (0.6990,1.3644) (0.5570,-1.1090) (0.6990,-0.6822) (0.5570,-0.2554) 
pow1: (125.0000,0.0000)(-9.0000,46.0000)(-0.0000,-125.0000)(9.0000,46.0000)(-125.0000,0.0000)(9.0000,-46.0000)(-0.0000,125.0000)(-9.0000,-46.0000)
pow2: (279.5085,0.0000)(-41.6677,78.6460)(197.6424,-197.6424)(-78.6460,41.6677)(-nan,0.0000)(-78.6460,-41.6677)(197.6424,197.6424)(-41.6677,-78.6460)
pow3: (-278.6742,-21.5798)(-2.4523,-27.3482)(-9.1748,7.8560)(0.2616,-0.4710)(-nan,-nan)(14644.7505,-1313.1903)(-4206.8204,-4913.0386)(252.2094,140.0641)
pow4: (525.2188,0.0000)(-34.4903,25.4693)(0.9998,-0.0194)(-0.0188,0.0139)(0.0019,0.0000)(-0.0188,-0.0139)(0.9998,0.0194)(-34.4903,-25.4693)
sin: (-0.9589,0.0000) (0.5309,-3.5906) (0.0000,74.2032) (-0.5309,-3.5906) (0.9589,0.0000) (-0.5309,3.5906) (0.0000,-74.2032) (0.5309,3.5906) 
sinh: (74.2032,0.0000) (-4.1689,9.1545) (0.0000,-0.9589) (4.1689,9.1545) (-74.2032,0.0000) (4.1689,-9.1545) (0.0000,0.9589) (-4.1689,-9.1545) 
sqrt: (2.2361,0.0000) (1.8174,0.5503) (1.5811,1.5811) (0.5503,1.8174) (0.0000,2.2361) (0.5503,-1.8174) (1.5811,-1.5811) (1.8174,-0.5503) 
tan: (-3.3805,0.0000) (-0.0099,0.9654) (0.0000,0.9999) (0.0099,0.9654) (3.3805,0.0000) (0.0099,-0.9654) (0.0000,-0.9999) (-0.0099,-0.9654) 
tanh: (0.9999,0.0000) (1.0032,-0.0038) (0.0000,-3.3805) (-1.0032,-0.0038) (-0.9999,0.0000) (-1.0032,0.0038) (0.0000,3.3805) (1.0032,0.0038) 
}
