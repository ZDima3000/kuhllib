#!/usr/local/bin/expect
# -*-C++-*- in_it1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  This file tests some stuff internal to cxxrt
# Version: $Id: in_it1.exp,v 1.1.1.1 2002/06/05 01:02:40 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <iostream>
  #include <streambuf>
  #include <cstdlib>
  #include <cstring>
  #include <cxxrt/in_it.h>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  class testbuf: public STD streambuf
  {
  public:
    testbuf(char const *s):
      str(STD strcpy(new char[STD strlen(s) + 1], s))
    {
      setg(str, str, str + STD strlen(str));
    }

  private:
    char* str;

    testbuf(testbuf const&);
    void operator=(testbuf const&);
  };

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    switch (av[1][0])
      {
      case '0':
        {
          char data[] = "0123456789abcdefghijklmnopqrstuvwxyz";
          STD _CS_in_it<char, char*, STD input_iterator_tag> in(data, data + 36, 10);
          for (char c; in._CS_next_counted_char(c); )
            STD cout << c;
          STD cout << '\n';
          for (char c; in._CS_next_char(c); )
            STD cout << c;
          STD cout << STD endl;
        }
        break;
      case '1':
        {
          char data[] = "0123456789abcdefghijklmnopqrstuvwxyz";
          STD _CS_in_it<char, char*, STD random_access_iterator_tag> in(data, data + 36, 10);
          for (char c; in._CS_next_counted_char(c); )
            STD cout << c;
          STD cout << '\n';
          for (char c; in._CS_next_char(c); )
            STD cout << c;
          STD cout << STD endl;
        }
        break;
      case '2':
        {
          testbuf buf("0123456789abcdefghijklmnopqrstuvwxyz");
          STD istreambuf_iterator<char> beg(&buf);
          STD istreambuf_iterator<char> end(0);
          STD _CS_in_it<char, STD istreambuf_iterator<char>, STD input_iterator_tag> in(beg, end, 10);
          for (char c; in._CS_next_counted_char(c); )
            STD cout << c;
          STD cout << '\n';
          for (char c; in._CS_next_char(c); )
            STD cout << c;
          STD cout << STD endl;
        }
        break;
      }

    return 0;
  }
}

simple_test "in_it for general input iterators" "0" {
0123456789
abcdefghijklmnopqrstuvwxyz
}

simple_test "in_it for random access iterators" "1" {
0123456789
abcdefghijklmnopqrstuvwxyz
}
simple_test "in_it for istreambuf_iterators" "2" {
0123456789
abcdefghijklmnopqrstuvwxyz
}
