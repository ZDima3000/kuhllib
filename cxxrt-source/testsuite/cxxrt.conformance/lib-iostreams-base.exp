#!/usr/local/bin/expect
# -*-C++-*- io-27-4-0.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Iostream base classes
# Version: $Id: lib-iostreams-base.exp,v 1.1.1.1 2002/06/05 01:03:10 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void so(STD streamoff) {}
  void sp(STD streampos) {}
  template <class stateT> inline void fp(STD fpos<stateT> const &) {}

  void ib(STD ios_base &) {}
  void manip(STD ios_base &fmt)
    {
      ib(STD boolalpha(fmt));
      ib(STD showbase(fmt));
      ib(STD showpoint(fmt));
      ib(STD showpos(fmt));
      ib(STD skipws(fmt));
      ib(STD uppercase(fmt));
      ib(STD noboolalpha(fmt));
      ib(STD noshowbase(fmt));
      ib(STD noshowpoint(fmt));
      ib(STD noshowpos(fmt));
      ib(STD noskipws(fmt));
      ib(STD nouppercase(fmt));

      ib(STD internal(fmt));
      ib(STD left(fmt));
      ib(STD right(fmt));

      ib(STD oct(fmt));
      ib(STD dec(fmt));
      ib(STD hex(fmt));

      ib(STD fixed(fmt));
      ib(STD scientific(fmt));
    }

  template <class charT> inline void dtios(STD basic_ios<charT, STD char_traits<charT> > &) {}
  template <class charT, class traits> inline void tios(STD basic_ios<charT, traits> &) {}
  void ctios(STD basic_ios<char> &bi) { dtios(bi); }

  int main()
  {
    return 0;
  }
}
