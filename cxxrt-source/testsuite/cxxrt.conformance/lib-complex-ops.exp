#!/usr/local/bin/expect
# -*-C++-*- lib-complex-ops.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  complex non-member operations
# Version: $Id: lib-complex-ops.exp,v 1.1.1.1 2002/06/05 01:03:08 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include "testnumeric.hpp"
  #include <sstream>
  #include <complex>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif
  
  template <class T>
    bool feq(STD complex<T> const& c1, STD complex<T> const& c2)
    {
      return tst::feq(c1.real(), c2.real()) && tst::feq(c1.imag(), c2.imag());
    }

  template <class T>
    bool test_input(char const* str, STD complex<T> const& c, bool good)
    {
      STD istringstream in(str);
      STD complex<T>          rc;
      in >> rc;
      if (!feq(rc, c))
	{
	  STD cout << "wrong value read: " << str << " -> " << rc << " (expected: " << c << "\n";
	  return false;
	}
      if (in.good() != good)
	STD cout << "flags are not set correctly\n";
      return in.good() == good;
    }

  template <class T>
    void test()
    {
      bool failed = false;
      STD complex<T> c1(T(2.0), T(3.0));
      STD complex<T> c2(T(1.0), T(4.0));

      if (!feq(c1, +c1) && (failed = true))
	STD cout << "unary plus failed\n";

      if (!feq(c1 + c2, STD complex<T>(T(3.0), T(7.0))) && (failed = true))
	STD cout << "complex plus failed\n";
      if (!feq(c1 + T(3.0), STD complex<T>(T(5.0), T(3.0))) && (failed = true))
	STD cout << "complex/scalar plus failed\n";
      if (!feq(T(3.0) + c1, STD complex<T>(T(5.0), T(3.0))) && (failed = true))
	STD cout << "scalar/complex plus failed\n";

      if (!feq(-c1, STD complex<T>(T(-2.0), T(-3.0))) && (failed = true))
	STD cout << "unary minus failed\n";

      if (!feq(c1 - c2, STD complex<T>(T(1.0), T(-1.0))) && (failed = true))
	STD cout << "complex minus failed\n";
      if (!feq(c1 - T(3.0), STD complex<T>(T(-1.0), T(3.0))) && (failed = true))
	STD cout << "complex/scalar minus failed\n";
      if (!feq(T(3.0) - c1, STD complex<T>(T(1.0), T(-3.0))) && (failed = true))
	STD cout << "scalar/complex minus failed\n";

      if (!feq(c1 * c2, STD complex<T>(T(-10.0), T(11.0))) && (failed = true))
	STD cout << "complex mult failed\n";
      if (!feq(c1 * T(3.0), STD complex<T>(T(6.0), T(9.0))) && (failed = true))
	STD cout << "complex/scalar mult failed\n";
      if (!feq(T(3.0) * c1, STD complex<T>(T(6.0), T(9.0))) && (failed = true))
	STD cout << "scalar/complex mult failed\n";

      STD complex<T> c3(T(-10.0), T(11.0));

      if (!feq(c3 / c2, STD complex<T>(T(2.0), T(3.0))) && (failed = true))
	STD cout << "complex div failed\n";
      if (!feq(c1 / T(2.0), STD complex<T>(T(1.0), T(1.5))) && (failed = true))
	STD cout << "complex/scalar div failed\n";
      if (!feq((T(3.0) / c1) * c1, STD complex<T>(T(3.0), T(0.0))) && (failed = true))
 	STD cout << "scalar/complex mult failed\n";

      STD complex<T> c4(T(2.0), T(0.0));

      if (!(c1 == STD complex<T>(T(2.0), T(3.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if ((c1 == STD complex<T>(T(2.0), T(2.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if ((c1 == STD complex<T>(T(1.0), T(3.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if ((c1 == STD complex<T>(T(1.0), T(2.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if (!(c4 == T(2.0)) && (failed = true))
	STD cout << "compare complex/scalar failed\n";
      if ((c4 == T(1.0)) && (failed = true))
	STD cout << "compare complex/scalar failed\n";
      if (!(T(2.0) == c4) && (failed = true))
	STD cout << "compare scalar/complex failed\n";
      if ((T(1.0) == c4) && (failed = true))
	STD cout << "compare scalar/complex failed\n";

      if ((c1 != STD complex<T>(T(2.0), T(3.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if (!(c1 != STD complex<T>(T(1.0), T(3.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if (!(c1 != STD complex<T>(T(2.0), T(1.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if (!(c1 != STD complex<T>(T(1.0), T(1.0))) && (failed = true))
	STD cout << "compare complex numbers failed\n";
      if ((c4 != T(2.0)) && (failed = true))
	STD cout << "compare complex/scalar failed\n";
      if (!(c4 != T(1.0)) && (failed = true))
	STD cout << "compare complex/scalar failed\n";
      if ((T(2.0) != c4) && (failed = true))
	STD cout << "compare scalar/complex failed\n";
      if (!(T(1.0) != c4) && (failed = true))
	STD cout << "compare scalar/complex failed\n";

      !test_input<T>(" 3.0 x", STD complex<T>(T(3.0), T(0.0)), true) && (failed = true);
      !test_input<T>(" ( 3.0 ) x", STD complex<T>(T(3.0), T(0.0)), true) && (failed = true);
      !test_input<T>(" ( 3.0 , 1.0 ) x", STD complex<T>(T(3.0), T(1.0)), true) && (failed = true);
      !test_input<T>(" x x", STD complex<T>(), false) && (failed = true);
      !test_input<T>(" () x", STD complex<T>(), false) && (failed = true);
      !test_input<T>(" ( 3.0 x)", STD complex<T>(), false) && (failed = true);
      !test_input<T>(" ( 3.0, 1.0 x)", STD complex<T>(), false) && (failed = true);

      STD ostringstream out;
      out << c1;
      if ((out.str() != "(2,3)") && (failed = true))
	STD cout << "simple output failed: \"" << out.str() << "\" (expected \"(2,3)\")\n";
      out.str("");

      out.width(10);
      out << c1;
      if ((out.str() != "     (2,3)") && (failed = true))
	STD cout << "left adjusted output failed: \"" << out.str() << "\" (expected \"(2,3)     \")\n";
      out.str("");
      
      out.setf(STD ios_base::right, STD ios_base::adjustfield);
      out.width(10);
      out << c1;
      if ((out.str() != "     (2,3)") && (failed = true))
	STD cout << "right adjusted output failed: \"" << out.str() << "\" (expected \"     (2,3)\")\n";
      out.str("");
      
      out.setf(STD ios_base::fixed, STD ios_base::floatfield);
      out.precision(2);
      out << c1;
      if ((out.str() != "(2.00,3.00)") && (failed = true))
	STD cout << "precision output failed: \"" << out.str() << "\" (expected \"(2.00,3.00)\")\n";
      out.str("");
      
      STD cout << (failed? "test failed\n": "OK\n");
    }

  int main()
  {
    test<float>();
    test<double>();
    test<long double>();
  #if defined(_CXXRT_STD)
    test<tst::number>();
  #else
    STD cout << "OK\n";
  #endif
      
    return 0;
  }
}

simple_test "complex non-member operations" "" {
OK
OK
OK
OK
}
