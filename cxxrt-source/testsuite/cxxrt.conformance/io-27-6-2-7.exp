#!/usr/local/bin/expect
# -*-C++-*- io-27-6-2-7.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  basic_ostream manipulators 
# Version: $Id: io-27-6-2-7.exp,v 1.1.1.1 2002/06/05 01:03:36 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ostream>
  #include <iostream>
  #include <streambuf>
  #include <locale>
  #if !defined(STD)
	#  if !defined(_CXXRT_STD)
	#    define STD std::
	#  else
	#    define STD _CXXRT_STD
	#  endif
	#endif

	// ---------------------------------------------------------------------------

	template <class cT>
		class tstbuf: public STD basic_streambuf<cT>
		{
		public:
			tstbuf() {}
		private:
			int sync() { STD cout << "sync\n"; return 0; }
			typename STD char_traits<cT>::int_type overflow(typename STD char_traits<cT>::int_type i)
			{
				if (!STD char_traits<cT>::eq_int_type(i, STD char_traits<cT>::eof()))
					{
						if (STD char_traits<cT>::to_char_type(i) == cT('\n')) // should use ctype::widen()...
							STD cout << "newline\n";
						else if (STD char_traits<cT>::to_char_type(i) == cT())
							STD cout << "null\n";
						else
							STD cout << "unknown character\n";
					}
				return STD char_traits<cT>::not_eof(i);
			}
		};

	// ---------------------------------------------------------------------------

  int main(int ac, char *av[])
  {
		if (ac != 2)
			{
				STD cerr << "wrong number of arguments\n";
				return 1;
			}

		STD basic_ostream<char>    out(new tstbuf<char>);
		STD basic_ostream<wchar_t> wout(new tstbuf<wchar_t>);

		switch (av[1][0])
			{
			case '0':
				out << STD endl;
				wout << STD endl;
				break;
			case '1':
				out << STD ends;
				wout << STD ends;
				break;
			case '2':
				out << STD flush;
				wout << STD flush;
				break;
			}

    return 0;
  }
}

simple_test "endl" "0" {
newline
sync
newline
sync
}

simple_test "ends" "1" {
null
null
}

simple_test "flush" "2" {
sync
sync
}
