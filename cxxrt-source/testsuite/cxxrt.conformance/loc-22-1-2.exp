#!/usr/local/bin/expect
# -*-C++-*- loc-22-1-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  locale globals
# Version: $Id: loc-22-1-2.exp,v 1.1.1.1 2002/06/05 01:03:37 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #include <typeinfo>

  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK": "test failed") << "\n";
  }

  class facet: public STD locale::facet
  {
  public:
    static STD locale::id id;
  };

  STD locale::id facet::id;

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    switch (av[1][0])
      {
      case '0':
        {
          try
            {
              STD use_facet<facet>(STD locale());
            }
          catch (std::bad_cast const &)
            {
              STD cout << "bad_cast\n";
            }
          facet *f = new facet;
          STD locale l(STD locale::classic(), f);
          result(&STD use_facet<facet>(l) == f);
        }
        break;
      case '1':
        {
          result(STD has_facet<facet>(STD locale::classic()));
          STD locale loc(STD locale::classic(), new facet);
          result(STD has_facet<facet>(loc));
        }
      }

    return 0;
  }
}

simple_test "use_facet<>()" "0" {
bad_cast
test OK
}

simple_test "has_facet<>()" "1" {
test failed
test OK
}
