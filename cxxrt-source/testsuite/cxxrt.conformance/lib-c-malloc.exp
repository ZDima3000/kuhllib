#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/lib-c-malloc.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  C Library
# Version: $Id: lib-c-malloc.exp,v 1.1.1.1 2002/06/05 01:02:43 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <cstdlib>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  int main()
  {
    void* ptr = STD malloc(10);
    STD free(ptr);
    ptr = STD calloc(10, 10);
    ptr = STD realloc(ptr, 100);

    return 0;
  }
}

inline_compile {
  #include <cstring>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  #if !defined(NULL)
  #  error "NULL is not defined"
  #endif

  template <class T> inline void test_type() {}
  template <class T> inline void check_type(T const&) {}

  int main()
  {
    test_type< STD size_t>();

    check_type<void*>(STD memchr(static_cast<void*>(0), int(0), STD size_t(0)));
    check_type<void const*>(STD memchr(static_cast<void const*>(0), int(0), STD size_t(0)));
    check_type<int>(STD memcmp(static_cast<void const*>(0), static_cast<void const*>(0), STD size_t(0)));
    check_type<void*>(STD memcpy(static_cast<void*>(0), static_cast<void const*>(0), STD size_t(0)));
    check_type<void*>(STD memmove(static_cast<void*>(0), static_cast<void const*>(0), STD size_t(0)));
    check_type<void*>(STD memset(static_cast<void*>(0), int(0), STD size_t(0)));
  }
}
