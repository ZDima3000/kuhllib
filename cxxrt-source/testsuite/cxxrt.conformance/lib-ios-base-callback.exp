#!/usr/local/bin/expect
# -*-C++-*- io-27-4-2-6.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  ios_base callbacks 
# Version: $Id: lib-ios-base-callback.exp,v 1.1.1.1 2002/06/05 01:03:05 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #include <locale>
  #include <cstdio>
  #include <testio.hpp>

  void result(bool rc)
  {
    char const msg_OK[] =   "test OK\n";
    char const msg_fail[] = "test failed\n";
    if (rc)
      write(msg_OK);
    else
      write(msg_fail);
  }

  void callback(STD ios_base::event ev, STD ios_base &, int)
  {
    char const imbue[]   = "imbue\n";
    char const erase[]   = "erase\n";
    char const copyfmt[] = "copyfmt\n";

    switch (ev)
      {
      case STD ios_base::imbue_event:
        write(imbue);
        break;
      case STD ios_base::copyfmt_event:
        write(copyfmt);
        break;
      case STD ios_base::erase_event:
        write(erase);
        break;
      }
  }

  int main(int, char *[])
  {
    STD basic_ios<char> fmt(0);

    fmt.register_callback(callback, 16);

    fmt.imbue(STD locale());

    return 0;
  }
}

simple_test "ios_base::register_callback" "" {
imbue
erase
}
