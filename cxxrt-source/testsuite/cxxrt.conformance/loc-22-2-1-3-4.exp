#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1-3-4.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  ctype<char> virtual functions
# Version: $Id: loc-22-2-1-3-4.exp,v 1.1.1.1 2002/06/05 01:02:59 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK": "test failed") << "\n";
  }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    STD ctype<char> const &ct = STD use_facet< STD ctype<char> >(STD locale::classic());

    switch (av[1][0])
      {
      case '0':
        {
          result(ct.toupper('a') == 'A');
          result(ct.toupper('A') == 'A');
          result(ct.toupper('1') == '1');

          char str[] = "aA1";
          result(ct.toupper(str, str + 3) == str + 3);

          result(str[0] == 'A');
          result(str[1] == 'A');
          result(str[2] == '1');
        }
        break;
      case '1':
        {
          result(ct.tolower('a') == 'a');
          result(ct.tolower('A') == 'a');
          result(ct.tolower('1') == '1');

          char str[] = "aA1";
          result(ct.tolower(str, str + 3) == str + 3);

          result(str[0] == 'a');
          result(str[1] == 'a');
          result(str[2] == '1');
        }
        break;
      case '2':
        {
          result(ct.widen('a') == 'a');
          result(ct.widen('A') == 'A');
          result(ct.widen('1') == '1');

          char str[] = "aAnN1. ";
          char to[sizeof(str)];
          result(ct.widen(str, str + sizeof(str), to) == str + sizeof(str));

          result(to[0] == 'a');
          result(to[1] == 'A');
          result(to[2] == 'n');
          result(to[3] == 'N');
          result(to[4] == '1');
          result(to[5] == '.');
          result(to[6] == ' ');
        }
        break;
      case '3':
        {
          result(ct.narrow('a', '*') == 'a');
          result(ct.narrow('A', '*') == 'A');
          result(ct.narrow('1', '*') == '1');

          char str[] = "aAnN1. ";
          static const int size = sizeof(str);
          char to[size];
          result(ct.narrow(str, str + size, '*', to) == str + size);

          result(to[0] == 'a');
          result(to[1] == 'A');
          result(to[2] == 'n');
          result(to[3] == 'N');
          result(to[4] == '1');
          result(to[5] == '.');
          result(to[6] == ' ');
        }
        break;
      }
    
    return 0;
  }
}

simple_test "ctype do_toupper()" "0" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}

simple_test "ctype do_tolower()" "1" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}

simple_test "ctype do_widen()" "2" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}

simple_test "ctype do_narrow()" "3" {
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
test OK
}
