#!/usr/local/bin/perl
# -*-C++-*- num_put2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Tests for the num_put locale; testing longs 
# Version: $Id: num_put2.exp,v 1.1.1.1 2002/06/05 01:03:47 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <ios>
  #include <iterator>
  #include <sstream>
  #include <cstdio>
  #include <cstdlib>

  #if !defined(_CXXRT_STD_NAME)
  #  define _CXXRT_STD_NAME std
  #endif
  using namespace _CXXRT_STD_NAME;

  void print_longs(ios_base &fmt, int width)
  {
    locale loc;
    num_put<char, ostreambuf_iterator<char> > const& np = use_facet<num_put<char, ostreambuf_iterator<char> > >(loc);
    ostringstream out;

    fmt.width(width);
    np.put(out, fmt, '@', 0l);
    printf("0:       >%s<\n", out.str().c_str());
    out.str("");

    fmt.width(width);
    np.put(out, fmt, '@', 123456l);
    printf("123456:  >%s<\n", out.str().c_str());
    out.str("");

    fmt.width(width);
    np.put(out, fmt, '@', -123456l);
    printf("-123456: >%s<\n", out.str().c_str());
    out.str("");
  }

  int main(int ac, char *av[])
  {
    if (ac < 2)
      {
        fprintf(stderr, "usage: %s <test-no>\n", av[0]);
        return 1;
      }

    ios fmt(static_cast<streambuf*>(0));

    switch (av[1][0])
      {
      case '0':
	print_longs(fmt, 0);
        break;
      case '1':
	fmt.setf(ios_base::left, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      case '2':
	fmt.setf(ios_base::internal, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      case '3':
	fmt.setf(ios_base::right, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      case '4':
	fmt.setf(ios_base::showpos);
	fmt.setf(ios_base::left, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      case '5':
	fmt.setf(ios_base::showpos);
	fmt.setf(ios_base::internal, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      case '6':
	fmt.setf(ios_base::showpos);
	fmt.setf(ios_base::right, ios_base::adjustfield);
	print_longs(fmt, 10);
        break;
      default:
	break;
      }

    return 0;
  }
}

simple_test "default long output" "0" {
0:       >0<
123456:  >123456<
-123456: >-123456<
}

simple_test "long output; left aligned" "1" {
0:       >0@@@@@@@@@<
123456:  >123456@@@@<
-123456: >-123456@@@<
}

simple_test "long output; internal aligned" "2" {
0:       >@@@@@@@@@0<
123456:  >@@@@123456<
-123456: >-@@@123456<
}

simple_test "long output; right aligned" "3" {
0:       >@@@@@@@@@0<
123456:  >@@@@123456<
-123456: >@@@-123456<
}

simple_test "long output with positiv sign; left aligned" "4" {
0:       >+0@@@@@@@@<
123456:  >+123456@@@<
-123456: >-123456@@@<
}

simple_test "long output with positiv sign; internal aligned" "5" {
0:       >+@@@@@@@@0<
123456:  >+@@@123456<
-123456: >-@@@123456<
}

simple_test "long output with positiv sign; right aligned" "6" {
0:       >@@@@@@@@+0<
123456:  >@@@+123456<
-123456: >@@@-123456<
}
