#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1-3-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  ctype<char> destructor
# Version: $Id: loc-22-2-1-3-1.exp,v 1.1.1.1 2002/06/05 01:02:58 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #include <cstdlib>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  using namespace std;
  #else
  #  define STD _CXXRT_STD
  using STD size_t;
  #endif

  class test: STD ctype<char>
  {
  public:
    test(STD ctype_base::mask *m, bool b):
      STD ctype<char>(m, b)
    {
    }
  };
  bool flag = false;
  void *operator new[] (size_t sz) throw(STD bad_alloc) { return STD malloc(sz); }
  void operator delete[] (void *ptr) throw()
    {
      if (flag)
        STD cout << "deleted\n";
      STD free(ptr);
    }
  int main(int, char *[])
  {
    STD ctype_base::mask *table = new STD ctype_base::mask[static_cast<int>(STD ctype<char>::table_size)];
    {
      test ct(table, false);
      flag = true;
    }
    flag = false;
    STD cout << "first destructor done\n";
    {
      test ct(table, true);
      flag = true;
    }
    flag = false;
    STD cout << "second destructor done\n";
    return 0;
  }
}

simple_test "ctype<char> destructor" "" {
first destructor done
deleted
second destructor done
}
