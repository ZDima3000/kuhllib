#!/usr/local/bin/expect
# -*-C++-*- io-27-4-6-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  fmtflags manipulators 
# Version: $Id: lib-fmtflags-manip.exp,v 1.1.1.1 2002/06/05 01:02:56 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #include <streambuf>
  #include <cstdio>
  #include <testio.hpp>

  void result(bool rc)
  {
    char const msg_OK[] =   "test OK\n";
    char const msg_fail[] = "test failed\n";
    if (rc)
      write(msg_OK);
    else
      write(msg_fail);
  }

  template <class charT>
  class my_streambuf: public STD basic_streambuf<charT>
  {
  };

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        char const oops[] = "wrong number of arguments\n";
        write(oops);
        return 1;
      }

    STD basic_ios<char> fmt(new my_streambuf<char>);

    switch (av[1][0])
      {
      case '0':
        STD boolalpha(fmt);
        result((fmt.flags() & STD ios_base::boolalpha) != 0);
        STD noboolalpha(fmt);
        result((fmt.flags() & STD ios_base::boolalpha) == 0);
        STD boolalpha(fmt);
        result((fmt.flags() & STD ios_base::boolalpha) != 0);
        break;
      case '1':
        STD showbase(fmt);
        result((fmt.flags() & STD ios_base::showbase) != 0);
        STD noshowbase(fmt);
        result((fmt.flags() & STD ios_base::showbase) == 0);
        STD showbase(fmt);
        result((fmt.flags() & STD ios_base::showbase) != 0);
        break;
      case '2':
        STD showpoint(fmt);
        result((fmt.flags() & STD ios_base::showpoint) != 0);
        STD noshowpoint(fmt);
        result((fmt.flags() & STD ios_base::showpoint) == 0);
        STD showpoint(fmt);
        result((fmt.flags() & STD ios_base::showpoint) != 0);
        break;
      case '3':
        STD skipws(fmt);
        result((fmt.flags() & STD ios_base::skipws) != 0);
        STD noskipws(fmt);
        result((fmt.flags() & STD ios_base::skipws) == 0);
        STD skipws(fmt);
        result((fmt.flags() & STD ios_base::skipws) != 0);
        break;
      case '4':
        STD uppercase(fmt);
        result((fmt.flags() & STD ios_base::uppercase) != 0);
        STD nouppercase(fmt);
        result((fmt.flags() & STD ios_base::uppercase) == 0);
        STD uppercase(fmt);
        result((fmt.flags() & STD ios_base::uppercase) != 0);
        break;
      case '5':
        STD unitbuf(fmt);
        result((fmt.flags() & STD ios_base::unitbuf) != 0);
        STD nounitbuf(fmt);
        result((fmt.flags() & STD ios_base::unitbuf) == 0);
        STD unitbuf(fmt);
        result((fmt.flags() & STD ios_base::unitbuf) != 0);
        break;
      }

    return 0;
  }
}

simple_test "manipulator boolalpha" "0" {
test OK
test OK
test OK
}

simple_test "manipulator showbase" "1" {
test OK
test OK
test OK
}

simple_test "manipulator showpoint" "2" {
test OK
test OK
test OK
}

simple_test "manipulator skipws" "3" {
test OK
test OK
test OK
}

simple_test "manipulator uppercase" "4" {
test OK
test OK
test OK
}

simple_test "manipulator unitbuf" "5" {
test OK
test OK
test OK
}
