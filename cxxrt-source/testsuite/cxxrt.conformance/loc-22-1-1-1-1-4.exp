#!/usr/local/bin/expect
# -*-C++-*- loc-22-1-1-1-1-4.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Required instantiations of facets
# Version: $Id: loc-22-1-1-1-1-4.exp,v 1.1.1.1 2002/06/05 01:03:22 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #define _CXXRT_LOCALE_IMPL
  #include <locale>
  #include <iterator>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  template <class T>
  class my_iterator
  {
  public:
    typedef T value_type;
    typedef T* pointer;
    typedef T& reference;
    typedef int difference_type;
    typedef STD forward_iterator_tag iterator_category;

    my_iterator &operator++ () { return *this; }
    my_iterator operator++ (int) { return *this; }
    T &operator* () { return val; }

    bool operator== (my_iterator const &) const { return true; }
    bool operator!= (my_iterator const &) const { return true; }

  private:
    T val;
  };

  int main(int, char *[])
  {
    STD locale l;

    STD locale(l, new STD collate_byname<char>("C"));
    STD locale(l, new STD collate_byname<wchar_t>("C"));

    STD locale(l, new STD ctype_byname<char>("C"));
    STD locale(l, new STD ctype_byname<wchar_t>("C"));

    STD locale(l, new STD moneypunct_byname<char, true>("C"));
    STD locale(l, new STD moneypunct_byname<char, false>("C"));
    STD locale(l, new STD moneypunct_byname<wchar_t, true>("C"));
    STD locale(l, new STD moneypunct_byname<wchar_t, false>("C"));
    STD locale(l, new STD money_get<char, my_iterator<char> >);
    STD locale(l, new STD money_put<char, my_iterator<char> >);

    STD locale(l, new STD numpunct_byname<char>("C"));
    STD locale(l, new STD numpunct_byname<wchar_t>("C"));
    STD locale(l, new STD num_get<char, my_iterator<char> >);
    STD locale(l, new STD num_put<char, my_iterator<char> >);

    STD locale(l, new STD time_get<char, my_iterator<char> >);
    STD locale(l, new STD time_get_byname<char, my_iterator<char> >("C"));
    STD locale(l, new STD time_get<wchar_t, my_iterator<wchar_t> >);
    STD locale(l, new STD time_get_byname<wchar_t, my_iterator<wchar_t> >("C"));
    STD locale(l, new STD time_put<char, my_iterator<char> >);
    STD locale(l, new STD time_put_byname<char, my_iterator<char> >("C"));
    STD locale(l, new STD time_put<wchar_t, my_iterator<wchar_t> >);
    STD locale(l, new STD time_put_byname<wchar_t, my_iterator<wchar_t> >("C"));

    STD locale(l, new STD messages_byname<char>("C"));
    STD locale(l, new STD messages_byname<wchar_t>("C"));

    return 0;
  }
}
