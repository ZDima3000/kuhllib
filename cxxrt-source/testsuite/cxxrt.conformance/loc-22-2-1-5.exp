#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1-5.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Template class codecvt
# Version: $Id: loc-22-2-1-5.exp,v 1.1.1.1 2002/06/05 01:03:06 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <cstdlib>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  using namespace std;
  #else
  #  define STD _CXXRT_STD
  using STD mbstate_t;
  using STD size_t;
  #endif

  template <class T> inline void check_type(T const&) {}

  template <class iT, class eT, class sT>
  class test_public
  {
  public:
    test_public()
    {
      STD codecvt<iT, eT, sT> &cc1 = *new STD codecvt<iT, eT, sT>;

      check_type< STD locale::facet>(cc1);
      check_type< STD codecvt_base>(cc1);

      sT       st;
      iT const *icp = 0;
      iT       *ip = 0;
      eT const *ecp = 0;
      eT       *ep = 0;
      size_t   max = 0;

      check_type< STD codecvt_base::result>(cc1.out(st, icp, icp, icp, ep, ep, ep));
      check_type< STD codecvt_base::result>(cc1.unshift(st, ep, ep, ep));
      check_type< STD codecvt_base::result>(cc1.in(st, ecp, ecp, ecp, ip, ip, ip));
      
      check_type<int  >(cc1.encoding());
      check_type<bool >(cc1.always_noconv());
      check_type<int  >(cc1.length(st, ecp, ecp, max));
      check_type<int  >(cc1.max_length());

      check_type< STD locale::id>(STD codecvt<iT, eT, sT>::id);
    }
  };

  template <class iT, class eT, class sT>
  class test_protected: public STD codecvt<iT, eT, sT>
  {
  public:
    test_protected()
    {
      sT       st;
      iT const *icp = 0;
      iT       *ip = 0;
      eT const *ecp = 0;
      eT       *ep = 0;
      size_t   max = 0;

      check_type< STD codecvt_base::result>(this->do_out(st, icp, icp, icp, ep, ep, ep));
      check_type< STD codecvt_base::result>(this->do_unshift(st, ep, ep, ep));
      check_type< STD codecvt_base::result>(this->do_in(st, ecp, ecp, ecp, ip, ip, ip));
      
      check_type<int >(this->do_encoding());
      check_type<bool>(this->do_always_noconv());
      check_type<int >(this->do_length(st, ecp, ecp, max));
      check_type<int >(this->do_max_length());
    }
  };

  int main(int, char *[])
  {
    test_public<char, char, mbstate_t>();
    test_protected<char, char, mbstate_t>();
    test_public<wchar_t, char, mbstate_t>();
    test_protected<wchar_t, char, mbstate_t>();
    return 0;
  }
}
