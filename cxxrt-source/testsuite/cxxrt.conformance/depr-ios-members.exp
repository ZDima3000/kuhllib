#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/depr-ios-members.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Old iostream members
# Version: $Id: depr-ios-members.exp,v 1.1.1.1 2002/06/05 01:02:46 dietmar_kuehl Exp $ 

# -------------------------------------------------------------------------- 

inline_compile {
  #include <iostream>
  #include <streambuf>
  #include <fstream>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  template <class T> struct test { typedef typename T::foo foo; };
  template <> struct test<bool> { typedef bool foo; };
  #if !defined(_CXXRT_HAS_WCHAR_T) || _CXXRT_HAS_WCHAR_T == 1
  template <> struct test<wchar_t> { typedef wchar_t foo; };
  #endif
  template <> struct test<char> { typedef char foo; };
  template <> struct test<short> { typedef short foo; };
  template <> struct test<int> { typedef int foo; };
  template <> struct test<long> { typedef long foo; };
  template <> struct test<signed char> { typedef signed char foo; };
  template <> struct test<unsigned char> { typedef unsigned char foo; };
  template <> struct test<unsigned short> { typedef unsigned short foo; };
  template <> struct test<unsigned int> { typedef unsigned int foo; };
  template <> struct test<unsigned long> { typedef unsigned long foo; };

  int main()
  {
    typedef test< STD ios_base::io_state>::foo  io_state;
    typedef test< STD ios_base::open_mode>::foo open_mode;
    typedef test< STD ios_base::seek_dir>::foo  seek_dir;
    typedef test< STD ios_base::streamoff>::foo streamoff;
    typedef STD ios_base::streampos streampos;

    STD cout.rdbuf()->stossc();

    STD cout.clear(STD ios_base::io_state());
    STD cout.setstate(STD ios_base::io_state());
    STD cout.exceptions(STD ios_base::io_state());

    STD cout.rdbuf()->pubseekoff(STD istream::pos_type(), STD ios_base::seek_dir());
    STD cout.rdbuf()->pubseekoff(STD istream::pos_type(), STD ios_base::seek_dir(),STD ios_base::open_mode());
    STD cout.rdbuf()->pubseekpos(STD istream::pos_type(), STD ios_base::open_mode());

    STD ifstream in;
    in.rdbuf()->open("foo", STD ios_base::open_mode());
    in.open("foo", STD ios_base::open_mode());
    STD ofstream out;
    out.rdbuf()->open("foo", STD ios_base::open_mode());

    return 0;
  }
}
