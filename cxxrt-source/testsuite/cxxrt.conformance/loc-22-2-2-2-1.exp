#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-2-2-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  num_put members
# Version: $Id: loc-22-2-2-2-1.exp,v 1.1.1.1 2002/06/05 01:03:32 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
	#include <iterator>
	#if !defined(_CXXRT_STD)
	#  define STD std::
	#else
	#  define STD _CXXRT_STD
	#endif

	template <class cT>
	class tst_num_put: public STD num_put<cT>
	{
		typedef typename STD num_put<cT>::char_type char_type;
		typedef typename STD num_put<cT>::iter_type iter_type;
	protected:
		iter_type do_put(iter_type it, STD ios_base&, char_type, bool) const
		{
			STD cout << "do_put(..., bool)\n";
			return it;
		}
		iter_type do_put(iter_type it, STD ios_base&, char_type, long) const
		{
			STD cout << "do_put(..., long)\n";
			return it;
		}
		iter_type do_put(iter_type it, STD ios_base&, char_type, unsigned long) const
		{
			STD cout << "do_put(..., unsigned long)\n";
			return it;
		}
		iter_type do_put(iter_type it, STD ios_base&, char_type, double) const
		{
			STD cout << "do_put(..., double)\n";
			return it;
		}
		iter_type do_put(iter_type it, STD ios_base&, char_type, long double) const
		{
			STD cout << "do_put(..., long double)\n";
			return it;
		}
		iter_type do_put(iter_type it, STD ios_base&, char_type, void const*) const
		{
			STD cout << "do_put(..., void const*)\n";
			return it;
		}
	};

  int main(int ac, char *av[])
  {
		if (ac != 2)
			{
				STD cerr << "wrong number of arguments\n";
				return 1;
			}

		switch (av[1][0])
			{
			case '0':
				{
					tst_num_put<char> np;
					STD ostreambuf_iterator<char> it(STD cout);
					np.put(it, STD cout, char(), true);
					np.put(it, STD cout, char(), 1l);
					np.put(it, STD cout, char(), 1ul);
					np.put(it, STD cout, char(), 1.0);
					np.put(it, STD cout, char(), 1.0l);
					np.put(it, STD cout, char(), static_cast<void const*>(0));
				}
				break;
			case '1':
				{
					tst_num_put<wchar_t> np;
					STD ostreambuf_iterator<wchar_t> it(STD wcout);
					np.put(it, STD cout, wchar_t(), true);
					np.put(it, STD cout, wchar_t(), 1l);
					np.put(it, STD cout, wchar_t(), 1ul);
					np.put(it, STD cout, wchar_t(), 1.0);
					np.put(it, STD cout, wchar_t(), 1.0l);
					np.put(it, STD cout, wchar_t(), static_cast<void const*>(0));
				}
				break;
			}

    return 0;
  }
}

simple_test "num_put<char> public members" "0" {
do_put(..., bool)
do_put(..., long)
do_put(..., unsigned long)
do_put(..., double)
do_put(..., long double)
do_put(..., void const*)
}

simple_test "num_put<wchar_t> public members" "1" {
do_put(..., bool)
do_put(..., long)
do_put(..., unsigned long)
do_put(..., double)
do_put(..., long double)
do_put(..., void const*)
}
