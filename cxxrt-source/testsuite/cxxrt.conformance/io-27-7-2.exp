#!/usr/local/bin/expect
# -*-C++-*- io-27-7-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Template class basic_istringstream
# Version: $Id: io-27-7-2.exp,v 1.1.1.1 2002/06/05 01:03:10 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <sstream>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif
  #endif

  template <class T> inline void check_type(T const&) {}
  template <class T> inline void use_object(T const&) {}
  template <class T1, class T2> inline void type_match(T1* t1, T2* t2) { t1 = t2; use_object(t1); }
  template <class T1, class T2> inline void test_type() { type_match(static_cast<T1*>(0), static_cast<T2*>(0)); }

  template <class cT>
    inline void test_istringstream()
    {
      test_type< STD basic_istream<cT>, STD basic_istringstream<cT> >();
      test_type< STD basic_istringstream<cT>, STD basic_istringstream<cT, STD char_traits<cT> > >();
      test_type< STD basic_istringstream<cT>,
	STD basic_istringstream<cT, STD char_traits<cT>, STD allocator<cT> > >();

      test_type<typename STD basic_istringstream<cT>::char_type, cT>();
      test_type<typename STD basic_istringstream<cT>::int_type, typename STD char_traits<cT>::int_type>();
      test_type<typename STD basic_istringstream<cT>::pos_type, typename STD char_traits<cT>::pos_type>();
      test_type<typename STD basic_istringstream<cT>::off_type, typename STD char_traits<cT>::off_type>();
      test_type<typename STD basic_istringstream<cT>::traits_type, STD char_traits<cT> >();

      STD basic_istringstream<cT> in;
      STD ios_base::openmode      mode = STD ios_base::openmode();
      STD basic_string<cT>        str;
      STD basic_istringstream<cT> in1(mode); use_object(in1);
      STD basic_istringstream<cT> in2(str); use_object(in2);
      STD basic_istringstream<cT> in3(str, mode); use_object(in3);

      check_type< STD basic_stringbuf<cT>*>(in.rdbuf());
      check_type< STD basic_string<cT> >(in.str());
      in.str(STD basic_string<cT>());
    }

  int main()
  {
    test_istringstream<char>();
    test_istringstream<wchar_t>();

    return 0;
  }
}
