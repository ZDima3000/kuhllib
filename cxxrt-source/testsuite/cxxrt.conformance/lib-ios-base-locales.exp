#!/usr/local/bin/expect
# -*-C++-*- io-27-4-2-3.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  ios_base locale functions 
# Version: $Id: lib-ios-base-locales.exp,v 1.1.1.1 2002/06/05 01:02:41 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <ios>
  #include <locale>
  #include <cstdio>
  #include <testio.hpp>

  void result(bool rc)
  {
    char const msg_OK[] =   "test OK\n";
    char const msg_fail[] = "test failed\n";
    if (rc)
      write(msg_OK);
    else
      write(msg_fail);
  }

  extern "C" unsigned int write(int, char const *, unsigned int);

  void callback(STD ios_base::event e, STD ios_base &, int)
  {
    char const msg_erase[] = "callback erase\n";
    char const msg_imbue[] = "callback imbue\n";
    char const msg_copyfmt[] = "callback copyfmt\n";

    switch (e)
      {
      case STD ios_base::erase_event:
        write(msg_erase);
        break;
      case STD ios_base::imbue_event:
        write(msg_imbue);
        break;
      case STD ios_base::copyfmt_event:
        write(msg_copyfmt);
        break;
      }
  }

  class my_ios: public STD basic_ios<char>
  {
  public:
    my_ios() { init(0); }
  };


  int main(int ac, char *av[])
  {
    my_ios fmt;

    if (ac != 2)
      {
        char const oops[] = "wrong number of arguments\n";
        write(oops);
        return 1;
      }

    switch (av[1][0])
      {
      case '1':
        {
          STD locale l;
          fmt.imbue(l);
          result(l == fmt.getloc());
        }
        break;
      case '2':
        {
          STD locale l;
          fmt.register_callback(callback, 17);
          fmt.imbue(l);
        }
        break;
      }
    return 0;
  }
}

simple_test "ios_base locale basics" "1" {
test OK
}

simple_test "ios_base imbue callback" "2" {
callback imbue
callback erase
}

