#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-2-2.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Template class num_get
# Version: $Id: loc-22-2-2-2.exp,v 1.1.1.1 2002/06/05 01:03:21 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #include <iterator>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  template <class T> void check_type(T const&) {}

  template <class T>
  void same_type(T const &, T const &) {}

  STD basic_ostream<char>& stream(char) { return STD cout; }
  STD basic_ostream<wchar_t>& stream(wchar_t) { return STD wcout; }

  template <class charT>
  void test(STD num_put<charT> const &np1)
  {
    check_type< STD num_put<charT, STD ostreambuf_iterator<charT> > >(np1);
    typedef typename STD num_put<charT>::char_type char_type;
    typedef typename STD num_put<charT>::iter_type iter_type;
    same_type(char_type(), charT());
    same_type(iter_type(stream(charT())), STD ostreambuf_iterator<charT>(stream(charT())));

    STD num_put<charT> &np3 = *new STD num_put<charT>;

    STD ostreambuf_iterator<charT> it(stream(charT()));

     np1.put(it, STD cout, charT(), true);
     np1.put(it, STD cout, charT(), static_cast<long>(1));
     np1.put(it, STD cout, charT(), static_cast<unsigned long>(1));
     np1.put(it, STD cout, charT(), static_cast<double>(1));
     np1.put(it, STD cout, charT(), static_cast<long double>(1));
     np1.put(it, STD cout, charT(), static_cast<void*>(0));

    check_type< STD locale::id>(np1.id);
  }

  int main(int, char *[])
  {
    test(STD use_facet< STD num_put<char> >(STD locale::classic()));
    test(STD use_facet< STD num_put<wchar_t> >(STD locale::classic()));
    return 0;
  }
}
