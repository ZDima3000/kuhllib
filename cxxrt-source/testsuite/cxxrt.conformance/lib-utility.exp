#!/usr/local/bin/expect
# -*-C++-*- cxxrt.conformance/lib-utility.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Utility components
# Version: $Id: lib-utility.exp,v 1.1.1.1 2002/06/05 01:02:49 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <utility>
  #if !defined(STD)
  #  if !defined(_CXXRT_STD)
  #    define STD std::
  #  else
  #    define STD _CXXRT_STD
  #  endif  
  #endif  

  template <class T> void check_type(T const&) {}
  
  struct foo {};
  bool operator== (foo const&, foo const&) { return true; }
  bool operator<  (foo const&, foo const&) { return true; }

  struct bar {};
  bool operator== (bar const&, bar const&) { return true; }
  bool operator!= (bar const&, bar const&) { return true; }
  bool operator<  (bar const&, bar const&) { return true; }
  bool operator>  (bar const&, bar const&) { return true; }
  bool operator<= (bar const&, bar const&) { return true; }
  bool operator>= (bar const&, bar const&) { return true; }

  int main()
  {
    check_type<bool>(STD rel_ops::operator!= (foo(), foo()));
    check_type<bool>(STD rel_ops::operator>  (foo(), foo()));
    check_type<bool>(STD rel_ops::operator<= (foo(), foo()));
    check_type<bool>(STD rel_ops::operator>= (foo(), foo()));

    STD pair<bar, bar> p;
    check_type<bool>(p == p);
    check_type<bool>(p != p);
    check_type<bool>(p >  p);
    check_type<bool>(p <  p);
    check_type<bool>(p >= p);
    check_type<bool>(p <= p);

    check_type< STD pair<foo, bar> >(STD make_pair(foo(), bar()));

    return 0;
  }
}
