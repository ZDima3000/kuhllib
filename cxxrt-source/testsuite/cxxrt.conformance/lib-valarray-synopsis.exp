#!/usr/local/bin/expect
# -*-C++-*- lib-valarray-synopsis.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Header <valarray> synopsis
# Version: $Id: lib-valarray-synopsis.exp,v 1.1.1.1 2002/06/05 01:03:28 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include "testtools.hpp"
  #include <valarray>

  #if defined(_ESTD_STD)
  #  define STD _ESTD_STD
  #elif defined(_CXXRT_STD)
  #  define STD _CXXRT_STD
  #else
  #  define STD ::std::
  #endif

  template <class T>
    void f(STD valarray<T> const&) {}

  template <class T>
    void test_float()
    {
      STD valarray<T>* vp1 = 0; use(vp1);
      STD slice* sp1 = 0; use(sp1);
      STD slice_array<T>* sa1 = 0; use(sa1);
      STD gslice* gp1 = 0; use(gp1);
      STD gslice_array<T>* ga1 = 0; use(ga1);
      STD mask_array<T>* ma1 = 0; use(ma1);
      STD indirect_array<T>* ia1 = 0; use(ia1);
      
      T t;
      STD valarray<T> va1;
      STD valarray<T> va2;

      f<T>(va1 * va2);
      f<T>(t * va2);
      f<T>(va1 * t);

      f<T>(va1 / va2);
      f<T>(t / va2);
      f<T>(va1 / t);

      f<T>(va1 + va2);
      f<T>(t + va2);
      f<T>(va1 + t);

      f<T>(va1 - va2);
      f<T>(t - va2);
      f<T>(va1 - t);

      f<bool>(va1 && va2);
      f<bool>(t && va2);
      f<bool>(va1 && t);

      f<bool>(va1 || va2);
      f<bool>(t || va2);
      f<bool>(va1 || t);

      f<bool>(va1 == va2);
      f<bool>(t == va2);
      f<bool>(va1 == t);

      f<bool>(va1 != va2);
      f<bool>(t != va2);
      f<bool>(va1 != t);

      f<bool>(va1 <= va2);
      f<bool>(t <= va2);
      f<bool>(va1 <= t);

      f<bool>(va1 < va2);
      f<bool>(t < va2);
      f<bool>(va1 < t);

      f<bool>(va1 >= va2);
      f<bool>(t >= va2);
      f<bool>(va1 >= t);

      f<bool>(va1 > va2);
      f<bool>(t > va2);
      f<bool>(va1 > t);

      f<T>(STD abs(va1));
      f<T>(STD acos(va1));
      f<T>(STD asin(va1));
      f<T>(STD atan(va1));

      f<T>(STD atan2(va1, va2));
      f<T>(STD atan2(t, va2));
      f<T>(STD atan2(va1, t));

      f<T>(STD cos(va1));
      f<T>(STD cosh(va1));
      f<T>(STD exp(va1));
      f<T>(STD log(va1));
      f<T>(STD log10(va1));

      f<T>(STD pow(va1, va2));
      f<T>(STD pow(t, va2));
      f<T>(STD pow(va1, t));

      f<T>(STD sin(va1));
      f<T>(STD sinh(va1));
      f<T>(STD sqrt(va1));
      f<T>(STD tan(va1));
      f<T>(STD tanh(va1));
    }

  template <class T>
    void test_int()
    {
      STD valarray<T>* vp1 = 0; use(vp1);
      STD slice* sp1 = 0; use(sp1);
      STD slice_array<T>* sa1 = 0; use(sa1);
      STD gslice* gp1 = 0; use(gp1);
      STD gslice_array<T>* ga1 = 0; use(ga1);
      STD mask_array<T>* ma1 = 0; use(ma1);
      STD indirect_array<T>* ia1 = 0; use(ia1);
      
      T t;
      STD valarray<T> va1;
      STD valarray<T> va2;

      f<T>(va1 * va2);
      f<T>(t * va2);
      f<T>(va1 * t);

      f<T>(va1 / va2);
      f<T>(t / va2);
      f<T>(va1 / t);

      f<T>(va1 % va2);
      f<T>(t % va2);
      f<T>(va1 % t);

      f<T>(va1 + va2);
      f<T>(t + va2);
      f<T>(va1 + t);

      f<T>(va1 - va2);
      f<T>(t - va2);
      f<T>(va1 - t);

      f<T>(va1 ^ va2);
      f<T>(t ^ va2);
      f<T>(va1 ^ t);

      f<T>(va1 | va2);
      f<T>(t | va2);
      f<T>(va1 | t);

      f<T>(va1 & va2);
      f<T>(t & va2);
      f<T>(va1 & t);

      f<T>(va1 << va2);
      f<T>(t << va2);
      f<T>(va1 << t);

      f<T>(va1 >> va2);
      f<T>(t >> va2);
      f<T>(va1 >> t);

      f<bool>(va1 && va2);
      f<bool>(t && va2);
      f<bool>(va1 && t);

      f<bool>(va1 || va2);
      f<bool>(t || va2);
      f<bool>(va1 || t);

      f<bool>(va1 == va2);
      f<bool>(t == va2);
      f<bool>(va1 == t);

      f<bool>(va1 != va2);
      f<bool>(t != va2);
      f<bool>(va1 != t);

      f<bool>(va1 <= va2);
      f<bool>(t <= va2);
      f<bool>(va1 <= t);

      f<bool>(va1 < va2);
      f<bool>(t < va2);
      f<bool>(va1 < t);

      f<bool>(va1 >= va2);
      f<bool>(t >= va2);
      f<bool>(va1 >= t);

      f<bool>(va1 > va2);
      f<bool>(t > va2);
      f<bool>(va1 > t);
    }

  int main()
  {
    test_int<int>();
    test_int<long>();
    test_float<float>();
    test_float<double>();
    test_float<long double>();

    return 0;
  }
}
