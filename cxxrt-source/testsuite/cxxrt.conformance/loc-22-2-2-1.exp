#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-2-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  Template class num_get
# Version: $Id: loc-22-2-2-1.exp,v 1.1.1.1 2002/06/05 01:03:21 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
  #include <iterator>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  template <class T> inline void check_type(T const&) {}

  template <class cT>
  inline void check_default(STD num_get<cT, STD istreambuf_iterator<cT> > const &) {}

  template <class cT>
  inline void test_public(STD num_get<cT> const &ng)
  {
    typedef typename STD num_get<cT>::char_type char_type;
    typedef typename STD num_get<cT>::iter_type iter_type;

    check_type< STD locale::facet>(ng);

    check_type< STD num_get<cT> *>(new STD num_get<cT>);
    check_type< STD num_get<cT> *>(new STD num_get<cT>(1));

    iter_type             begin;
    iter_type             end;
    STD ios_base::iostate err;

    bool b;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, b));
    long l;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, l));
    unsigned short us;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, us));
    unsigned int ui;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, ui));
    unsigned long ul;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, ul));
    float f;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, f));
    double d;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, d));
    long double ld;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, ld));
    void *vp;
    check_type<iter_type>(ng.get(begin, end, STD cout, err, vp));

    check_type< STD locale::id>(STD num_get<cT>::id);
  }

  template <class cT>
  class test_protected: public STD num_get<cT>
  {
    typedef typename STD num_get<cT>::iter_type iter_type;

  public:
    test_protected()
    {
      iter_type             begin;
      iter_type             end;
      STD ios_base::iostate err;

      bool b;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, b));
      long l;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, l));
      unsigned short us;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, us));
      unsigned int ui;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, ui));
      unsigned long ul;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, ul));
      float f;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, f));
      double d;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, d));
      long double ld;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, ld));
      void *vp;
      check_type<iter_type>(this->do_get(begin, end, STD cout, err, vp));
    }
  };
    
  int main(int, char *[])
  {
    STD num_get<char> const &ng1 = STD use_facet< STD num_get<char> >(STD locale::classic());
    check_default(ng1);
    test_public(ng1);
    test_protected<char>();

    STD num_get<wchar_t> const &ng2 = STD use_facet< STD num_get<wchar_t> >(STD locale::classic());
    check_default(ng2);
    test_public(ng2);
    test_protected<wchar_t>();

    return 0;
  }
}
