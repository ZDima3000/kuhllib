#!/usr/local/bin/expect
# -*-C++-*- loc-22-2-1-1-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  ctype members
# Version: $Id: loc-22-2-1-1-1.exp,v 1.2 2006/04/07 07:07:13 dietmar_kuehl Exp $
# -------------------------------------------------------------------------- 

inline_compile {
  #include <locale>
  #include <iostream>
	#if !defined(_CXXRT_STD)
	#  define STD std::
	#else
	#  define STD _CXXRT_STD
	#endif

	class test: public STD ctype<wchar_t>
	{
	protected:
		bool do_is(STD ctype_base::mask, wchar_t) const
		{
			STD cout << "do_is(mask, c)\n";
			return true;
		}
		wchar_t const *do_is(wchar_t const *, wchar_t const *, STD ctype_base::mask*) const
		{
			STD cout << "do_is(b, e, mask)\n";
			return 0;
		}
		wchar_t const *do_scan_is(STD ctype_base::mask, wchar_t const *, wchar_t const *) const
		{
			STD cout << "do_scan_is(m, b, e)\n";
			return 0;
		}
		wchar_t const *do_scan_not(STD ctype_base::mask, wchar_t const *, wchar_t const *) const
		{
			STD cout << "do_scan_not(m, b, e)\n";
			return 0;
		}

		wchar_t do_toupper(wchar_t) const
		{
			STD cout << "do_toupper(c)\n";
			return wchar_t();
		}
		wchar_t const *do_toupper(wchar_t *, wchar_t const *) const
		{
			STD cout << "do_toupper(b, e)\n";
			return wchar_t();
		}
		wchar_t do_tolower(wchar_t) const
		{
			STD cout << "do_tolower(c)\n";
			return wchar_t();
		}
		wchar_t const *do_tolower(wchar_t *, wchar_t const *) const
		{
			STD cout << "do_tolower(b, e)\n";
			return wchar_t();
		}

		wchar_t do_widen(char) const
		{
			STD cout << "do_widen(c)\n";
			return wchar_t();
		}
		char const *do_widen(char const *, char const *, wchar_t*) const
		{
			STD cout << "do_widen(b, e, t)\n";
			return 0;
		}
		char do_narrow(wchar_t, char) const
		{
			STD cout << "do_narrow(c, d)\n";
			return char();
		}
		wchar_t const *do_narrow(wchar_t const*, wchar_t const*, char, char*) const
		{
			STD cout << "do_narrow(b, e, d, t)\n";
			return 0;
		}
	};

  int main(int, char *[])
  {
    test t;
		test const &ct = t;
		char                 nbuf[10];
		wchar_t              cbuf[10];
		STD ctype_base::mask mbuf[10];

		ct.is(STD ctype_base::space, L'a');
		ct.is(cbuf, cbuf + 10, mbuf);
		ct.scan_is(STD ctype_base::space, cbuf, cbuf + 10);
		ct.scan_not(STD ctype_base::space, cbuf, cbuf + 10);

		ct.toupper(L'a');
		ct.toupper(cbuf, cbuf + 10);
		ct.tolower(L'a');
		ct.tolower(cbuf, cbuf + 10);
		
		ct.widen('a');
		ct.widen(nbuf, nbuf + 10, cbuf);
		ct.narrow(L'a', 'a');
		ct.narrow(cbuf, cbuf + 10, 'a', nbuf);
		
    return 0;
  }
}

simple_test "ctype members" "" {
do_is(mask, c)
do_is(b, e, mask)
do_scan_is(m, b, e)
do_scan_not(m, b, e)
do_toupper(c)
do_toupper(b, e)
do_tolower(c)
do_tolower(b, e)
do_widen(c)
do_widen(b, e, t)
do_narrow(c, d)
do_narrow(b, e, d, t)
}
