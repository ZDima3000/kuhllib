#!/usr/local/bin/expect
# -*-C++-*- io-27-6-1-1-1.exp -- C++ is actually a lie but it helps
# -------------------------------------------------------------------------- 
# Copyright (c) 2002 Dietmar Kuehl

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -------------------------------------------------------------------------- 
# Author: Dietmar Kuehl <http://www.dietmar-kuehl.de/>
# Title:  basic_istream constructors
# Version: $Id: io-27-6-1-1-1.exp,v 1.1.1.1 2002/06/05 01:03:03 dietmar_kuehl Exp $ 
# -------------------------------------------------------------------------- 

inline_compile {
  #include <istream>
  #include <iostream>
  #include <streambuf>
  #if !defined(_CXXRT_STD)
  #  define STD std::
  #else
  #  define STD _CXXRT_STD
  #endif

  void result(bool rc)
  {
    STD cout << (rc? "test OK": "test failed") << "\n";
  }

  template <class cT>
    class basic_testbuf: public STD basic_streambuf<cT>
    {
    };

  template <class cT>
  void test()
    {
      STD basic_streambuf<cT>* sb = new basic_testbuf<cT>;
      STD basic_istream<cT> in(sb);

      result(in.gcount() == 0);
      result(in.rdbuf() == sb);
    }

  int main(int ac, char *av[])
  {
    if (ac != 2)
      {
        STD cerr << "wrong number of arguments\n";
        return 1;
      }

    switch (av[1][0])
      {
      case '0':
        test<char>();
        break;
      case '1':
        test<wchar_t>();
        break;
      }

    return 0;
  }
}

simple_test "basic_istream<char> ctor/dtor" "0" {
test OK
test OK
}

simple_test "basic_istream<wchar_t> ctor/dtor" "1" {
test OK
test OK
}
